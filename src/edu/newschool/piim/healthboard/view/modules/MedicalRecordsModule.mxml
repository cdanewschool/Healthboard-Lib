<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:general="edu.newschool.piim.healthboard.view.components.general.*" 
	xmlns:plus="net.flexwiz.blog.tabbar.plus.*" 
	xmlns:components="edu.newschool.piim.healthboard.view.components.*"
	show="onShow()"
	creationComplete="init()">
	
	<fx:Declarations>
		<fx:Array id="bgeMedicalRecords">
			<mx:GridLines gridDirection="both">
				<mx:horizontalStroke>
					<mx:SolidColorStroke alpha="0" color="0xFFFFFF" />
				</mx:horizontalStroke>
				<mx:verticalStroke>
					<s:SolidColorStroke id="medRecVerticalGridLine" alpha="0" color="0xFFFFFF" />
				</mx:verticalStroke>
				<mx:horizontalAlternateFill>
					<mx:SolidColor color="{horizontalAlternateFill}" />
				</mx:horizontalAlternateFill>
				<mx:horizontalFill>
					<s:SolidColor color="{horizontalFill}" />
				</mx:horizontalFill>
			</mx:GridLines>
			<mx:CartesianDataCanvas id="cartesianCanvas" />
		</fx:Array>
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="provider" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import edu.newschool.piim.healthboard.Constants;
			import edu.newschool.piim.healthboard.view.components.tooltips.MyCustomDataTip;
			
			import edu.newschool.piim.healthboard.view.components.popups.medicalrecords.MyNextStepsHistoryWindow;
			import edu.newschool.piim.healthboard.view.components.popups.medicalrecords.SetNextStepsPopup;
			import edu.newschool.piim.healthboard.view.components.tabs.ServiceDetails;
			
			import edu.newschool.piim.healthboard.controller.MedicalRecordsController;
			
			import edu.newschool.piim.healthboard.enum.AppointmentClassificationType;
			import edu.newschool.piim.healthboard.enum.DateRanges;
			
			import edu.newschool.piim.healthboard.events.ApplicationDataEvent;
			import edu.newschool.piim.healthboard.events.ApplicationEvent;
			import edu.newschool.piim.healthboard.events.AppointmentEvent;
			
			import net.flexwiz.blog.tabbar.plus.TabPlus;
			
			import edu.newschool.piim.healthboard.model.AppointmentCategory;
			import edu.newschool.piim.healthboard.model.NextStep;
			import edu.newschool.piim.healthboard.model.module.AppointmentsModel;
			import edu.newschool.piim.healthboard.model.module.MedicalRecordsModel;
			import edu.newschool.piim.healthboard.model.module.medicalrecords.MedicalRecord;
			
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.items.PlotSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.ListEvent;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			
			import edu.newschool.piim.healthboard.view.styles.ChartStyles;
			
			import edu.newschool.piim.healthboard.util.ChartLabelFunctions;
			import edu.newschool.piim.healthboard.util.DateFormatters;
			import edu.newschool.piim.healthboard.util.DateUtil;
			
			private const SEARCH_PLACEHOLDER:String = "Search medical records";
			
			[Bindable] public var showHeader:Boolean = true;
			
			[Bindable] private var controller:MedicalRecordsController = AppProperties.getInstance().controller.medicalRecordsController as MedicalRecordsController;
			[Bindable] public var model:MedicalRecordsModel = controller.model as MedicalRecordsModel;
			[Bindable] private var chartStyles:ChartStyles = AppProperties.getInstance().controller.model.chartStyles;
			
			[Bindable] private var minDateMedRec:Date;
			[Bindable] private var maxDateMedRec:Date;
			
			[Bindable] private var horizontalFill:uint = 0x4A4A49;
			[Bindable] private var horizontalAlternateFill:uint = 0x303030;
			[Bindable] public var nextStepsRollOverRowIndex:int = -2;
			
			private var today:Date = AppProperties.getInstance().controller.model.today;
			
			[Bindable] private var categoriesFlat:ArrayCollection;
			[Bindable] private var medicalRecordsDataGrid:ArrayCollection;
			
			private var openLeaves:Array;
			
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if( tabsMedicalRecords.selectedIndex == 0 ) 
				{			
					bottomBoxes.visible = bottomBoxes.includeInLayout = true;
					viewStack.height = 406;
				}
				else 
				{
					bottomBoxes.visible = bottomBoxes.includeInLayout = false;
					viewStack.height = 602;
				}
			}
			
			private function onToggleTreeItem():void 
			{
				updateLeaves();
				
				model.medicalRecords.filterFunction = filterFunction;
				model.medicalRecords.refresh();
				
				medicalRecordsDataGrid.filterFunction = null;
				medicalRecordsDataGrid.refresh();
				
				//	rebuild categoriesFlat array collection so data points match displayed categories in tree
				categoriesFlat.removeAll();
				
				for each(var category:AppointmentCategory in model.categories)
				{
					categoriesFlat.addItem( category );
					
					if( category.children )
					{
						for each(var subcategory:AppointmentCategory in category.children )
						{
							for each(var medicalRecord:MedicalRecord in model.medicalRecords) 
							{
								if( subcategory == medicalRecord.category
									&& categoriesFlat.getItemIndex( medicalRecord.category ) == -1 ) 
								{
									categoriesFlat.addItem( medicalRecord.category );
								}
							}
						}	
					}			
				}
				
				//	for some reason we need to reverse this
				categoriesFlat.source.reverse();
				
				plotChart.height = categoriesFlat.length * 28 + 24;
				
				updateMedRecHeightAndColors();
				
				if( header.search.text != SEARCH_PLACEHOLDER ) 
				{
					header.search.text = "";
					
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				}
			}
			
			/**
			 * 
			*/
			private function updateLeaves():void
			{
				openLeaves = new Array();
				
				var openCategories:Array = new Array();
				
				var i:uint;
				
				for(i = 0; i < categoryTree.openItems.length; i++)
					openCategories.push( AppointmentCategory( categoryTree.openItems[i] ) );
				
				var count:int = 0;
				
				for(i = 0; i < model.categories.length; i++) 
				{
					var category:AppointmentCategory = model.categories.getItemAt(i) as AppointmentCategory;
					
					if( openCategories.indexOf( category ) > -1 || !category.categories || !category.categories.length ) 
					{
						openLeaves.push( category );
						
						if( category.categories )
						{
							for(var j:uint = 0; j < category.children.length; j++) 
							{
								openLeaves.push( AppointmentCategory( categoryTree.openItems[count] ).children.getItemAt(j) );
							}
						}
					}
					else
					{
						count--;
					}
					
					count++;
				}
			}
			
			//	filter functions
			private function filterFunction(item:MedicalRecord):Boolean 
			{
				return openLeaves.indexOf( item.category ) != -1;
			}
			
			private function filterFunctionSearch(item:Object):Boolean
			{
				var pattern:RegExp = new RegExp("[^]*"+header.search.text+"[^]*", "i");
				var concatenatedNextSteps:String = "";
				
				if(item.nextSteps) 
				{
					for(var i:uint = 0; i < item.nextSteps.length; i++) 
					{
						concatenatedNextSteps += item.nextSteps[i].task;
					}
				}
				
				return pattern.test(item.name) || pattern.test(item.reason) || pattern.test(item.provider) || pattern.test(item.classification) || pattern.test(item.date) || pattern.test(concatenatedNextSteps);
			}
			
			private function medicalRecordsCategoriesForTree():void 
			{
				var model:MedicalRecordsModel = model as MedicalRecordsModel;
				
				//	setting openItems = the first two only (instead of all 4 categories), because if we have the 4 categories "open", then we have a conflict with the filter (this is done so we could have "Surgeries" and "Procedures" as branches, without children, without the "open/close" arrows)
				var categoryTreeOpenItem:ArrayCollection = new ArrayCollection();
				categoryTreeOpenItem.addItem( model.categories[0] );
				categoryTreeOpenItem.addItem( model.categories[1] );
				categoryTree.openItems = categoryTreeOpenItem;
			}
			
			private function updateMedRecHeightAndColors():void
			{
				plotChart.height = categoriesFlat.length * 28 + 24;
				
				horizontalAlternateFill = categoriesFlat.length % 2 == 1 ? 0x303030 : 0x4A4A49;
				horizontalFill = categoriesFlat.length % 2 == 1 ? 0x4A4A49 : 0x303030;
				
				updateToday();
			}
			
			private function medicalRecordsFillFunction(element:ChartItem, index:Number):IFill 
			{
				var c:SolidColor = chartStyles.colorMedicalRecordsOutpatient;	//blue
				var item:PlotSeriesItem = PlotSeriesItem(element);
				
				if( item.item.classification == AppointmentClassificationType.INPATIENT ) 
				{
					c = chartStyles.colorMedicalRecordsInpatient;		//orange
				}
				
				return c;
			}
			
			//	tooltips
			private function dataTipsMedicalRecords(hd:HitData):String 
			{
				var item:MedicalRecord = hd.item as MedicalRecord;
				
				return (item.category ? "<i>" + item.category.label + "</i><br><br>" : '') + "<font color='#1D1D1B'>" + item.description + "<br>" + item.provider.fullName + "<br>" + DateFormatters.dateOnlyBackslashDelimited.format( item.date ) + "</font><br><br><i>Click to view record</i>";
			}
			
			private function applyCustomDataTips():void 
			{
				plotChart.setStyle("dataTipRenderer",MyCustomDataTip);    
			}
			
			private function switchMedicalRecordsView(index:uint):void 
			{
				viewsMedicalRecords.selectedIndex = index;
				
				if(index == 0) 
				{
					btnMedicalRecordsChart.setStyle("chromeColor", 0xFF931E);
					btnMedicalRecordsList.setStyle("chromeColor", 0xB3B3B3);
				}
				else {
					btnMedicalRecordsChart.setStyle("chromeColor", 0xB3B3B3);
					btnMedicalRecordsList.setStyle("chromeColor", 0xFF931E);
				}
			}
			
			//	service details
			private function showServiceDetails(e:ChartItemEvent):void
			{
				viewServiceDetails( e.hitData.item as MedicalRecord );
			}
			
			private function showServiceDetailsDG(e:ListEvent):void 
			{
				viewServiceDetails( e.itemRenderer.data as MedicalRecord );
			}
			
			public function viewServiceDetails(service:MedicalRecord):void
			{
				var isServiceAlreadyOpen:Boolean = false;
				
				for(var j:uint = 0; j < model.openTabs.length; j++) 
				{
					if( model.openTabs[j] == service ) 
					{
						isServiceAlreadyOpen = true;
						viewStack.selectedIndex = j + 1;		//	+1 because in arrOpenTabs we don't include the first tab
						break;
					}
				}				
				
				if(!isServiceAlreadyOpen) 
				{
					var serviceDetails:ServiceDetails = new ServiceDetails();
					serviceDetails.addEventListener( AppointmentEvent.REQUEST_APPOINTMENT, onRequestAppointment );
					serviceDetails.medicalRecord = service;
					viewStack.addChild(serviceDetails);
					
					tabsMedicalRecords.selectedIndex = viewStack.length - 1;
					model.openTabs.push(service);
				}
				
				bottomBoxes.visible = bottomBoxes.includeInLayout = false;
				viewStack.height = 602;
			}
			
			//	date range
			private function medicalRecordsSetMinMax():void 
			{
				hAxisMedicalRecords.minimum = minDateMedRec;
				hAxisMedicalRecords.maximum = maxDateMedRec;
				
				updateToday();
			}
			
			private function setDateRange(range:String=null):void
			{
				model.dateRange = range;
				
				updateDateRange();
			}
			
			private function updateDateRange():void 
			{
				minDateMedRec = new Date( today.fullYear, today.month, today.date );
				maxDateMedRec = new Date( today.fullYear, today.month, today.date );
				
				maxDateMedRec.time += (DateUtil.DAY * 1.25);
				
				if( model.dateRange == DateRanges.DAY ) 
				{
					minDateMedRec.time -= (DateUtil.DAY * 1.5);
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					medRecVerticalGridLine.alpha = 0;
				}
				else if( model.dateRange == DateRanges.WEEK )
				{
					minDateMedRec.time -= DateUtil.WEEK;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					medRecVerticalGridLine.alpha = 0;
				}
				else if( model.dateRange == DateRanges.MONTH )
				{
					minDateMedRec.time -= DateUtil.MONTH;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					medRecVerticalGridLine.alpha = 0;
				}
				else if( model.dateRange == DateRanges.MONTH_THREE ) 
				{
					minDateMedRec.time -= DateUtil.MONTH * 3;
					maxDateMedRec.time += DateUtil.MONTH * .5;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartMonth2;
					medRecVerticalGridLine.alpha = 0;
				}
				else if( model.dateRange == DateRanges.YEAR ) 
				{
					minDateMedRec = new Date( today.fullYear - 1, today.month, 14 );		//by setting the day to 14, we are basically ensuring the month labels don't mess up the chart's alignment by being at the "edge"... 		//minDateMedRec.time -= DateUtil.YEAR;
					maxDateMedRec = new Date( today.fullYear, today.month + 1, 14 );																																					//maxDateMedRec.time += DateUtil.MONTH * 1.5;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartMonth2;
					medRecVerticalGridLine.alpha = 0;
				}
				else if( model.dateRange == DateRanges.YEAR_THREE ) 
				{
					minDateMedRec.time -= DateUtil.YEAR * 3;
					maxDateMedRec.time += DateUtil.MONTH * 3;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartYear;
					medRecVerticalGridLine.alpha = 0.3;
				}
				else
				{
					//	TODO: set minDateMedRec/maxDateMedRec based on actual data
					minDateMedRec.time -= DateUtil.YEAR * 3;
					maxDateMedRec.time += DateUtil.MONTH * 3;
					
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartYear;
					medRecVerticalGridLine.alpha = 0.3;
				}
				
				hAxisMedicalRecords.minimum = minDateMedRec;
				hAxisMedicalRecords.maximum = maxDateMedRec;
				
				updateToday();
			}
			
			private function updateToday():void
			{
				if( !categoriesFlat || !categoriesFlat.length ) return;
				
				var date:Date = new Date( today.fullYear, today.month, today.date );
				var dateValue:String = DateFormatters.dateFormatterToday.format( date );
				
				cartesianCanvas.clear();
				cartesianCanvas.lineStyle(3,0x00ADEE,0.3,true,LineScaleMode.NORMAL,CapsStyle.ROUND,JointStyle.MITER,2);
				cartesianCanvas.moveTo( dateValue, AppointmentCategory(categoriesFlat.getItemAt(0)).id );
				cartesianCanvas.lineTo( dateValue, AppointmentCategory(categoriesFlat.getItemAt(categoriesFlat.length-1)).id );
				
				var coords:Point = cartesianCanvas.dataToLocal( dateValue );
				todayLabel.x = coords.x - todayLabel.width/2 - 7;
			}
			
			private function clearSearchMedRec():void 
			{
				model.medicalRecords.filterFunction = null;
				model.medicalRecords.refresh();
				medicalRecordsDataGrid.filterFunction = null;
				medicalRecordsDataGrid.refresh();
				
				header.search.text = SEARCH_PLACEHOLDER;
				
				lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				plotChart.visible = plotChart.includeInLayout = categoryTree.visible = categoryTree.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = true;
				lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = false;
			}
			
			public function requestClass(recommendation:String):void 
			{
				dispatchEvent( new AppointmentEvent( AppointmentEvent.REQUEST_CLASS, true, false, recommendation ) );
			}
			
			public function searchFilterMedRed():void 
			{
				model.medicalRecords.filterFunction = filterFunctionSearch;
				model.medicalRecords.refresh();
				medicalRecordsDataGrid.filterFunction = filterFunctionSearch;
				medicalRecordsDataGrid.refresh();
				
				if( model.medicalRecords.length == 0 ) 
				{
					plotChart.visible = plotChart.includeInLayout = categoryTree.visible = categoryTree.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = false;
					lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = true;
				}
				else 
				{
					plotChart.visible = plotChart.includeInLayout = categoryTree.visible = categoryTree.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = true;
					lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = false;
				}
				
				if( header.search.text != "" ) 
				{
					lblSearchResultsMedRec.text = 'Search Results: "' + header.search.text + '"';
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = true;
				}
				else 
				{
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				}
			}
			
			private function calculateServiceUsage():void 
			{
				var countOutpatient:uint = 0;
				var countDiagnostic:uint = 0;
				
				for(var i:uint = 0; i < model.medicalRecords.source.length; i++) 
				{
					var medicalRecord:MedicalRecord = model.medicalRecords.getItemAt(i) as MedicalRecord;
					
					if( medicalRecord.classification == AppointmentClassificationType.OUTPATIENT ) countOutpatient++;
					
					if( model.categories.getItemIndex(medicalRecord.category) > -1 ) 
						countDiagnostic++;
				}
				
				if( lblMedRecOutpatient ) lblMedRecOutpatient.text = String(countOutpatient);
				if( lblMedRecDiagnostic ) lblMedRecDiagnostic.text = String(countDiagnostic);
			}
			
			//	event handlers
			protected function onTabChange(event:IndexChangeEvent):void 
			{
				invalidateDisplayList();
			}
			
			private function onRequestAppointment( event:AppointmentEvent ):void
			{
				dispatchEvent( event );
			}
			
			private function onCloseTab( event:ListEvent ):void
			{
				var index:int = event.rowIndex;
				
				model.openTabs.splice( index-1,1 );
				
				invalidateDisplayList();
			}
			
			private function onDataLoaded(event:ApplicationDataEvent=null):void
			{	
				calculateServiceUsage();
				
				medicalRecordsCategoriesForTree();
				
				updateMedRecHeightAndColors();
				
				onShow();
			}
			
			private function onShow():void
			{
				if( model.pendingRecord != null )
				{
					viewServiceDetails( model.pendingRecord );
					
					model.pendingRecord = null;
				}
			}
			
			private function onShowNextStepsHistory():void 
			{
				var myNextStepsHistory:MyNextStepsHistoryWindow = MyNextStepsHistoryWindow(PopUpManager.createPopUp(this, MyNextStepsHistoryWindow) as spark.components.TitleWindow);
				PopUpManager.centerPopUp(myNextStepsHistory);
			}
			
			private function onSetNextSteps():void
			{
				var nextStepsPopup:SetNextStepsPopup = SetNextStepsPopup( PopUpManager.createPopUp(this, SetNextStepsPopup) as spark.components.TitleWindow );
				PopUpManager.centerPopUp(nextStepsPopup);
			}
			
			//	next steps
			public function removeNextStep( nextStep:NextStep):void
			{
				var nextSteps:ArrayCollection = AppointmentsModel( AppProperties.getInstance().controller.appointmentsController.model ).nextSteps;
				nextSteps.removeItemAt( nextSteps.getItemIndex(nextStep) )
			}
			
			private function onNextStepsRollOver(event:ListEvent):void
			{
				nextStepsRollOverRowIndex = event.rowIndex;
			}
			
			private function getParentCategory(category:AppointmentCategory):AppointmentCategory
			{
				for each(var c:AppointmentCategory in model.categories)
					for each(var sc:AppointmentCategory in c.categories)
						if( sc == category )
							return c;
						
				return null;
			}
			
			//	label functions
			private function getCategoryLabel(item:AppointmentCategory):String { return item.label; }
			private function getProviderNameLabel(item:MedicalRecord,column:DataGridColumn):String { return item.provider ? item.provider.fullName : ''; }
			private function getDateLabel(item:Object, column:DataGridColumn):String { return DateFormatters.dateOnlyBackslashDelimited.format( item.date ); }
			private function getNextStepsLabel(item:MedicalRecord, column:DataGridColumn):String { return item.nextSteps != null && item.nextSteps.length ? "Yes" : ""; }
			private function getTypeLabel(item:MedicalRecord, column:DataGridColumn):String { return item.category != null ? getCategoryLabel(item.category) : ""; }
			
			private function init():void
			{
				medicalRecordsDataGrid = new ArrayCollection( model.medicalRecords.source.slice() );
				
				categoriesFlat = new ArrayCollection();
				
				for each(var category:AppointmentCategory in model.categories)
				{
					categoriesFlat.addItem( category );
					
					if( category.children != null 
						&& category.children.length )
					{
						for each(var subcategory:AppointmentCategory in category.children)
						{
							categoriesFlat.addItem( subcategory );
						}
					}
				}
				
				categoriesFlat.source.reverse();
				
				onDataLoaded();
				
				updateDateRange();
				
				header.searchPlaceholder = SEARCH_PLACEHOLDER;
				
				tabsMedicalRecords.addEventListener( TabPlus.CLOSE_TAB_EVENT, onCloseTab );
			}

		]]>
	</fx:Script>
	
	<components:ModuleHeader 
		id="header"
		icon="@Embed('/images/btnHome.png')"
		title="Medical Records" 
		actionSuffix="new medical record." actionCount="1" 
		showSearch="true" searchFunction="searchFilterMedRed" showBackground="false" visible="{showHeader}" includeInLayout="{showHeader}" />
	
	<s:Spacer height="10" />
	
	<s:Group creationComplete="{tabsMedicalRecords.setTabClosePolicy(0, false);}"><!--tabBarMedRedInitializeHandler()-->
		
		<mx:ViewStack id="viewStack" borderColor="0xBDBCBC" cornerRadius="2" backgroundColor="0x4A4A49" borderVisible="true" borderStyle="solid" x="0" y="22">
			
			<s:NavigatorContent label="Service History"><!--id="mainBox"-->
				
				<s:layout>
					<s:VerticalLayout gap="0" />
				</s:layout>
				
				<s:BorderContainer height="37" width="100%" backgroundColor="0x706F6F">
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle" paddingRight="6" paddingLeft="8"/>
					</s:layout>
					
					<s:Button label="Set Next Steps" height="24" styleName="buttonText" click="onSetNextSteps()" visible="{currentState=='provider'}" includeInLayout="{currentState=='provider'}" />
					<s:Button label="Print" height="24" styleName="buttonText" />
					<s:Button label="Export" height="24" styleName="buttonText" click="dispatchEvent( new ApplicationEvent( ApplicationEvent.SHOW_STATUS, true, false, 'Your file has been exported') )" />
					
					<s:Spacer width="100%" />
					<s:Label id="lblSearchResultsMedRec" visible="false" paddingTop="2" color="0xFFFFFF" fontWeight="bold" maxWidth="260" maxDisplayedLines="1" />
					<mx:LinkButton id="btnClearSearchMedRec" label="(Clear)" visible="false" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" paddingLeft="-5" paddingRight="-8" click="clearSearchMedRec()" rollOver="btnClearSearchMedRec.styleName='linkBtnUnderline';" rollOut="btnClearSearchMedRec.styleName='linkBtn';" />
					<s:Spacer width="100%" />
					
					<s:HGroup color="0xFFFFFF" gap="0" paddingTop="1">
						
						<s:Label text="Time Range:" paddingTop="6" />
						
						<general:customLinkButton label="{DateRanges.DAY}" click="setDateRange(DateRanges.DAY)" selected="{model.dateRange==DateRanges.DAY}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="{DateRanges.WEEK}" click="setDateRange(DateRanges.WEEK)" selected="{model.dateRange==DateRanges.WEEK}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="{DateRanges.MONTH}" click="setDateRange(DateRanges.MONTH)" selected="{model.dateRange==DateRanges.MONTH}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="{DateRanges.MONTH_THREE}" click="setDateRange(DateRanges.MONTH_THREE)" selected="{model.dateRange==DateRanges.MONTH_THREE}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="{DateRanges.YEAR}" click="setDateRange(DateRanges.YEAR)" selected="{model.dateRange==DateRanges.YEAR}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="{DateRanges.YEAR_THREE}" click="setDateRange(DateRanges.YEAR_THREE)" selected="{model.dateRange==DateRanges.YEAR_THREE}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton label="All" click="setDateRange()" selected="{model.dateRange==null}" toggleBackgroundColor="0x4A4A49" skin="edu.newschool.piim.healthboard.view.skins.general.MyLinkButtonSkin" paddingLeft="4" paddingRight="4" />
						<general:customLinkButton id="btnMedCustom" label="Custom" />
						
					</s:HGroup>
					
					<s:HGroup gap="0">
						<s:Button id="btnMedicalRecordsChart" width="29" height="24" icon="@Embed('/images/btnImmunizationsChart.png')" chromeColor="0xFF931E" click="switchMedicalRecordsView(0)" />
						<s:Button id="btnMedicalRecordsList" width="29" height="24" icon="@Embed('/images/btnCalendarList.png')" styleName="buttonText" click="switchMedicalRecordsView(1)" />
					</s:HGroup>
					
				</s:BorderContainer>
				
				<s:Line xFrom="0" xTo="974">
					<s:stroke>
						<s:SolidColorStroke color="#3F3E3D"/>
					</s:stroke>
					
				</s:Line>
				
				<mx:ViewStack id="viewsMedicalRecords" width="100%" height="374" creationPolicy="all">
					
					<s:NavigatorContent width="100%">
						<s:layout>
							<s:VerticalLayout />
						</s:layout>
						
						<s:HGroup id="medRecDGHeader" styleName="subtitles" verticalAlign="middle" paddingTop="-1" paddingLeft="42">
							
							<s:Label text="Type of Service" paddingTop="1" />
							
							<s:Line yFrom="0" yTo="31">
								<s:stroke>
									<s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3"/>
								</s:stroke>
							</s:Line>
							
							<s:Group>
								
								<s:Label text="Date" paddingTop="1" />
								<s:Label id="todayLabel" text="Today" paddingTop="1" textAlign="center" />
							</s:Group>
							
						</s:HGroup>
						
						<s:HGroup id="medRecDGLine" paddingLeft="104" paddingTop="-7" paddingBottom="-7"><!--bottom = -6, left = -2 (without ticks)-->
							<s:Line xFrom="0" xTo="870"><!-- xTo=976 (without ticks)-->
								<s:stroke>
									<s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" />
								</s:stroke>
							</s:Line>
						</s:HGroup>
						
						<s:HGroup width="100%" gap="0">
							
							<mx:Tree 
								id="categoryTree" 
								dataProvider="{model.categories}" labelFunction="getCategoryLabel"
								width="130"
								verticalScrollPolicy="off" horizontalScrollPolicy="off"
								selectable="false"
								itemRenderer="edu.newschool.piim.healthboard.view.components.itemrenderers.tree.MyTreeItemRendererMedRec"
								contentBackgroundAlpha="0" color="0xBED63A" fontWeight="bold" alternatingItemColors="[0x4A4A49,0x303030]"
								rowHeight="28" rowCount="{categoriesFlat.length}"
								defaultLeafIcon="{null}" folderClosedIcon="{null}" folderOpenIcon="{null}"
								itemOpen="onToggleTreeItem()" itemClose="onToggleTreeItem()" />
							
							<mx:PlotChart 
								id="plotChart" width="100%"
								dataProvider="{model.medicalRecords}" showDataTips="true" backgroundElements="{bgeMedicalRecords}"
								paddingLeft="-4" dataTipFunction="dataTipsMedicalRecords" creationComplete="applyCustomDataTips(); medicalRecordsSetMinMax();" itemClick="showServiceDetails(event)"><!--height="300"-->
								
								<mx:horizontalAxisRenderers>
									<mx:AxisRenderer id="hAxisRendMedicalRecords" axis="{hAxisMedicalRecords}" tickPlacement="none">
										<mx:axisStroke><mx:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" /></mx:axisStroke>
									</mx:AxisRenderer>
								</mx:horizontalAxisRenderers>
								
								<!--ADDING THIS AXIS RENDERER ONLY SO WE CAN HAVE THE HORIZONTAL LINES IN THE CHART (ie minorTicks)-->
								<mx:verticalAxisRenderers>
									
									<mx:AxisRenderer id="vAxisRendMedicalRecords" axis="{vAxisMedicalRecords}" tickPlacement="none" minorTickPlacement="inside" minorTickLength="845" showLabels="false"> <!--labelAlign="bottom"-->
										<mx:minorTickStroke><s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" /></mx:minorTickStroke>
										<mx:axisStroke><mx:SolidColorStroke color="#FFFFFF" weight="1" alpha=".1" /></mx:axisStroke>
									</mx:AxisRenderer>
									
								</mx:verticalAxisRenderers>
								
								<mx:horizontalAxis>
									<mx:DateTimeAxis id="hAxisMedicalRecords" labelFunction="ChartLabelFunctions.lblHAxisPlotChartMonth2" />
								</mx:horizontalAxis>
								
								<mx:verticalAxis>
									<mx:CategoryAxis id="vAxisMedicalRecords" dataProvider="{categoriesFlat}" categoryField="id" /><!---->
								</mx:verticalAxis>
								
								<mx:series>
									<mx:PlotSeries xField="date" yField="category_id" displayName="Medical Record" fillFunction="medicalRecordsFillFunction" itemRenderer="edu.newschool.piim.healthboard.view.components.itemrenderers.chart.MyMixedItemRendererMedicalRecords" radius="6" selectable="true" stroke="{chartStyles.whiteStroke}" />
								</mx:series>
								
							</mx:PlotChart>
							
						</s:HGroup>
						
						<mx:Legend id="legendMedicalRecords" direction="horizontal" color="0xFFFFFF" paddingLeft="131" fontFamily="myMyriadNoCFF">
							<mx:LegendItem label="Outpatient Services" markerAspectRatio="1" markerHeight="12" markerWidth="12" fill="{chartStyles.colorMedicalRecordsOutpatient}"  stroke="{chartStyles.whiteStroke}" />
							<mx:LegendItem label="Inpatient Services" legendMarkerRenderer="mx.charts.renderers.CircleItemRenderer" markerAspectRatio="1" markerHeight="12" markerWidth="12" fill="{chartStyles.colorMedicalRecordsInpatient}" stroke="{chartStyles.whiteStroke}" />
						</mx:Legend>
						
						<mx:Text id="lblNoMedicalRecords1" visible="false" includeInLayout="false" width="100%" textAlign="center" color="0xFFFFFF" fontSize="11" paddingTop="31"
								 htmlText="{'There are no matching search results for the requested search.&lt;br&gt;Please make sure all words are spelled correctly, or try different keywords.'}" />
						
					</s:NavigatorContent>
					
					<s:NavigatorContent height="100%">
						
						<mx:DataGrid 
							id="medicalRecordsList" 
							dataProvider="{medicalRecordsDataGrid}" 
							styleName="standardDataGrid"
							width="100%" height="100%"
							itemClick="showServiceDetailsDG(event)"
							paddingTop="6" rowHeight="27">
							
							<mx:columns> 
								<mx:DataGridColumn dataField="date" headerText="Date of Service" paddingLeft="5" labelFunction="getDateLabel" />
								<mx:DataGridColumn dataField="category_id" headerText="Type of Service" width="180" paddingLeft="5" labelFunction="getTypeLabel" />
								<mx:DataGridColumn dataField="description" headerText="Reason for Visit" paddingLeft="5"  />
								<mx:DataGridColumn dataField="provider" headerText="Provider" paddingLeft="5" labelFunction="getProviderNameLabel" />
								<mx:DataGridColumn dataField="classification" headerText="Classification" paddingLeft="5" />
								<mx:DataGridColumn dataField="nextSteps" headerText="Next Steps" paddingLeft="5" labelFunction="getNextStepsLabel" />
							</mx:columns>
							
						</mx:DataGrid>
						
						<mx:Text 
							id="lblNoMedicalRecords2" visible="false" includeInLayout="false" width="100%" textAlign="center" color="0xFFFFFF" fontSize="11" paddingTop="31"
							htmlText="{'There are no matching search results for the requested search.&lt;br&gt;Please make sure all words are spelled correctly, or try different keywords.'}" />
						
					</s:NavigatorContent>
					
				</mx:ViewStack>
				
			</s:NavigatorContent>
			
		</mx:ViewStack>
		
		<plus:TabBarPlus id="tabsMedicalRecords" gap="6" cornerRadius="4" styleName="messagesTabs" closePolicy="always" dataProvider="{viewStack}" change="onTabChange(event)" />
		
	</s:Group>
	
	<s:HGroup id="bottomBoxes" paddingTop="17" gap="22">
		
		<s:BorderContainer width="{currentState=='provider'?223:477}" height="173" backgroundColor="0x3C3C3B" borderColor="0xBDBDBC" cornerRadius="3" fontSize="13">
			
			<s:layout>
				<s:VerticalLayout paddingLeft="23" paddingTop="17" gap="18" />
			</s:layout>
			
			<s:Label text="Total Service Usage" styleName="greenBoldText" />
			
			<s:HGroup gap="16">
				
				<s:Label id="lblMedRecOutpatient" width="40" textAlign="right" styleName="orangeStandout" />
				
				<s:VGroup gap="3" paddingTop="3">
					<s:Label text="Outpatient Services" color="#FFFFFF" />
					<s:Label text="in the past year" fontStyle="italic" color="#CCCCCC" />
				</s:VGroup>
				
			</s:HGroup>
			
			<s:HGroup gap="16" paddingTop="10">
				
				<s:Label id="lblMedRecDiagnostic" width="40" textAlign="right" styleName="orangeStandout" />
				
				<s:VGroup gap="3" paddingTop="3">
					<s:Label text="Diagnostic Services" color="#FFFFFF" />
					<s:Label text="in the past year" fontStyle="italic" color="#CCCCCC" />
				</s:VGroup>
				
			</s:HGroup>
			
		</s:BorderContainer>
		
		<s:BorderContainer visible="{currentState=='provider'}" includeInLayout="{currentState=='provider'}" width="350" maxHeight="173" backgroundColor="0x3C3C3B" borderColor="0xBDBDBC" cornerRadius="3">
			
			<s:layout>
				<s:VerticalLayout paddingTop="17" />
			</s:layout>
			
			<s:HGroup width="100%" paddingRight="7" paddingTop="-1" paddingLeft="23" paddingBottom="6">
				
				<s:Label text="{currentState=='provider'?'Next Steps for Patient':'My Next Steps'}" styleName="greenBoldText" paddingTop="1" />
				
				<s:Spacer width="100%" />
				
				<general:MainLinkButton id="btnNextStepsHistory" label="History" click="onShowNextStepsHistory()" fontSize="11" paddingTop="-6" styleName="linkBtnBlue" />
				
			</s:HGroup>
			
			<mx:DataGrid 
				id="nextSteps" 
				dataProvider="{model.nextSteps}" 
				width="100%" height="100%" 
				fontSize="12" color="0xEDEDED" selectable="false" headerHeight="0" borderVisible="false" rowHeight="64" 
				verticalGridLines="false" horizontalGridLines="false" variableRowHeight="true"
				alternatingItemColors="[0x303030,0x3C3C3B]" 
				itemRollOver="onNextStepsRollOver(event)" itemRollOut="nextStepsRollOverRowIndex=-2">
				
				<mx:columns>
					
					<mx:DataGridColumn dataField="task" paddingLeft="23" width="{currentState=='provider'?270:530}">
						
						<mx:itemRenderer>
							
							<fx:Component>
								
								<mx:HBox paddingTop="8" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									
									<s:Label text="•" fontSize="6" paddingTop="2" />
									
									<mx:VBox verticalGap="3">
										
										<s:Label text="{data.task}" width="{outerDocument.currentState=='provider'?160:420}" lineHeight="16" />
										
										<mx:HBox visible="{data.recommendation != ''}" includeInLayout="{data.recommendation != ''}">
											<s:Label text="Recommendation:" paddingTop="4" />
											<general:MainLinkButton id="btnNextStepsRecommendation" label="{data.recommendation}" paddingTop="-5" paddingLeft="-7" styleName="linkBtnBlue" click="{outerDocument.requestClass(data.recommendation)}" />
										</mx:HBox>
										
									</mx:VBox>
									
								</mx:HBox>
								
							</fx:Component>
							
						</mx:itemRenderer>
						
					</mx:DataGridColumn>
					
					<mx:DataGridColumn dataField="completed" visible="{currentState == 'default'}">
						
						<mx:itemRenderer>
							
							<fx:Component>
								
								<mx:HBox paddingTop="13" horizontalGap="-2" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									
									<fx:Script>
										<![CDATA[
											import edu.newschool.piim.healthboard.model.NextStep;
										]]>
									</fx:Script>
									
									<mx:VBox paddingTop="2">
										<s:Image source="@Embed('/images/checkmarkNextSteps.png')" toolTip="Completed" visible="{data.completed}" />
									</mx:VBox>
									
									<mx:VBox verticalGap="1" paddingTop="-2">
										<general:MainLinkButton id="btnNextStepsMarkCompleted" label="{data.completed ? 'Unmark completed' : 'Mark completed'}" paddingTop="-5" click="{data.completed = !data.completed}" />
										<general:MainLinkButton id="btnNextStepsDelete" label="Remove" styleName="linkBtnBlue" click="outerDocument.removeNextStep(data as NextStep)" />
									</mx:VBox>
									
								</mx:HBox>
								
							</fx:Component>
							
						</mx:itemRenderer> 
						
					</mx:DataGridColumn>
					
					<mx:DataGridColumn dataField="completed" visible="{currentState == 'provider'}">
						<mx:itemRenderer>
							<fx:Component>
								
								<mx:HBox paddingTop="13" horizontalGap="-2" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									
									<fx:Script>
										<![CDATA[
											import edu.newschool.piim.healthboard.model.NextStep;
										]]>
									</fx:Script>
									
									<mx:VBox paddingTop="2">
										
										<mx:Label text="{data.completed ? 'Completed' : 'In progress'}" color="0xFFFFFF" />
										
										<mx:LinkButton 
											label="X" color="0xffffff" textSelectedColor="0xffffff" textRollOverColor="0xffffff" 
											click="{outerDocument.removeNextStep(data as NextStep)}" 
											visible="{outerDocument.nextSteps.dataProvider.getItemIndex(data) == outerDocument.nextStepsRollOverRowIndex}"
											skin="{null}" toolTip="Click to cancel next step" />
										
									</mx:VBox>
									
								</mx:HBox>
								
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					
				</mx:columns>
				
			</mx:DataGrid>
			
		</s:BorderContainer>
		
		<s:BorderContainer 
			width="{currentState=='provider'?350:478}" maxHeight="173" 
			backgroundColor="0x3C3C3B" borderColor="0xBDBDBC" cornerRadius="3">
			
			<s:layout>
				<s:VerticalLayout paddingTop="17" />
			</s:layout>
			
			<s:HGroup width="100%" paddingRight="7" paddingTop="-1" paddingLeft="23" paddingBottom="6">
				<s:Label text="Problem List" styleName="greenBoldText" paddingTop="1" />
				<s:Spacer width="100%" />
				<general:MainLinkButton id="problemListHistory" label="History" fontSize="11" paddingTop="-6" styleName="linkBtnBlue" />
			</s:HGroup>
			
			<mx:DataGrid 
				width="100%" height="100%" dataProvider="{model.problemList}"
				fontSize="12" color="0xEDEDED" selectable="false" headerHeight="0" borderVisible="false" rowHeight="64" 
				verticalGridLines="false" horizontalGridLines="false" alternatingItemColors="[0x303030,0x3C3C3B]">
				<mx:columns>
					<mx:DataGridColumn dataField="problem" paddingLeft="23" width="270">
						<mx:itemRenderer>
							<fx:Component>		
								<mx:VBox paddingTop="8" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<fx:Script>
										<![CDATA[
											import edu.newschool.piim.healthboard.Constants;
										]]>
									</fx:Script>
									<mx:HBox paddingTop="2">
										<s:Label text="•" fontSize="6" paddingTop="2" />
										<s:Label text="{data.problem}" width="160" lineHeight="16" />
									</mx:HBox>
									<s:Label id="enteredOn" creationComplete="enteredOn.text='Entered on ' + Constants.MONTHS[ data.dateEntered.month ] + ' ' + data.dateEntered.date + ', ' + data.dateEntered.year + ' by ' + data.provider"  fontSize="6" paddingTop="2" styleName="mediumGray12Italic" />
								</mx:VBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
			
		</s:BorderContainer>
		
	</s:HGroup>
	
</s:VGroup>
