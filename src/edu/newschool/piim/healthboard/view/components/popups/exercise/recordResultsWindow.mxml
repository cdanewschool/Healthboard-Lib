<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="372" height="490"
			   xmlns:net="flash.net.*"
			   close="PopUpManager.removePopUp(this);" skinClass="edu.newschool.piim.healthboard.view.skins.general.myHeaderlessTitleWindow" color="0x000000"
			   creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import edu.newschool.piim.healthboard.controller.ExerciseController;
			
			import edu.newschool.piim.healthboard.enum.ExerciseType;
			
			import edu.newschool.piim.healthboard.events.ApplicationEvent;
			
			import edu.newschool.piim.healthboard.model.module.ExerciseModel;
			
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectProxy;
			
			import spark.components.TextInput;
			import spark.events.DropDownEvent;
			
			import edu.newschool.piim.healthboard.util.DateFormatters;
			import edu.newschool.piim.healthboard.util.DateUtil;
			
			[Bindable] private var today:Date;
			
			[Bindable] public var controller:ExerciseController = AppProperties.getInstance().controller.exerciseController as ExerciseController;
			[Bindable] public var model:ExerciseModel = controller.model as ExerciseModel;
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if( dateChooser && today )
				{
					navigateNext.enabled = dateChooser.selectedDate.date < today.date
				}
			}
			
			private function init():void
			{
				controlBarVisible = false;
				
				today = new Date
					( 
						AppProperties.getInstance().controller.model.today.fullYear, 
						AppProperties.getInstance().controller.model.today.month, 
						AppProperties.getInstance().controller.model.today.date 
					);
				
				dateChooser.selectableRange = {rangeEnd: today}
				dateChooser.selectedDate = today;
				
			}
			
			private function navigate( direction:int = 1 ):void
			{
				dateChooser.selectedDate = new Date( dateChooser.selectedDate.fullYear, dateChooser.selectedDate.month, dateChooser.selectedDate.date + direction);
				
				invalidateProperties();
			}
			
			private function getDateLabel(item:Date):String 
			{
				return DateFormatters.dateOnlyBackslashDelimited.format(item);
			}
			
			private function addRecord():void 
			{
				controller.updatePAIndices();
				
				dateChooser.text = DateUtil.get10DigitDate(dateChooser.text);	//ensure date field has 10 digits, because if it accidentally has something like 9/24/2012; it won't be recognized when viewing the record later.
				
				if(txtRunWalk.text != "") 
				{
					var runWalkStartIndex:int = (new Date(dateChooser.text) >= new Date(model.exerciseDataByMeasurePhysicianAssigned[model.exercisePAIndices.indexOf( ExerciseType.RUN )].chart[0].data[model.exerciseDataByMeasurePhysicianAssigned[model.exercisePAIndices.indexOf( ExerciseType.RUN )].chart[0].data.length - 1].date)) ? model.exerciseDataByMeasurePhysicianAssigned[model.exercisePAIndices.indexOf( ExerciseType.RUN )].chart[0].data.length : -2;	//if the new date is the latest one, we add the new object at the end of the array (length-- using -1 wasn't working), otherwise we added before the end (-2)
					var newRunWalk:Object = new Object();
					
					newRunWalk = ({value:txtRunWalk.text, expectation: model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.RUN ) ).chart.getItemAt(0).data.getItemAt(0).expectation, date:dateChooser.text, value2:txtRunWalkMiles.text, measure: "runWalk"});
					model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.RUN ) ).chart.getItemAt(0).data.addItemAt(newRunWalk,runWalkStartIndex);

					if(Number(txtRunWalk.text) > (model.exerciseDataByMeasurePhysicianAssigned[model.exercisePAIndices.indexOf( ExerciseType.RUN )].chartMax - 10)) 
						model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.RUN ) ).chartMax = Number(txtRunWalk.text) + 10;
					else if(Number(txtRunWalk.text) < (model.exerciseDataByMeasurePhysicianAssigned[model.exercisePAIndices.indexOf( ExerciseType.RUN )].chartMin + 10)) 
						model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.RUN ) ).chartMin = Number(txtRunWalk.text) - 10;

					if(new Date(dateChooser.text) > new Date(model.runWalkMax)) model.runWalkMax = dateChooser.text;
					
					//	here maybe if you want you could do it so that this is true IF the new date (PLUS 30 DAYS) is greater than the weightChartMax
					if(new Date(dateChooser.text) > model.runWalkChartMax) 
					{
						var myNewDate:Date = new Date(dateChooser.text);
						
						if(myNewDate.getDate() < 22) myNewDate.setDate(22);		//this is a quick fix to ensure the graph doesn't get resized due to the position of the axis's labels.
						myNewDate.setMonth(myNewDate.getMonth() + 1);
						model.runWalkChartMax = myNewDate;
					}
				}
				
				if(txtBike.text != "") 
				{
					var bikeStartIndex:int = (new Date(dateChooser.text) >= new Date(model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chart.getItemAt(0).data.getItemAt( model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chart.getItemAt(0).data.length - 1 ).date)) ? model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chart.getItemAt(0).data.length : -2;	//if the new date is the latest one, we add the new object at the end of the array (length-- using -1 wasn't working), otherwise we added before the end (-2)
					var newBike:Object = new Object();
					
					newBike = ({value:txtBike.text, expectation: model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE )).chart.getItemAt(0).data.getItemAt(0).expectation, date:dateChooser.text, value2:txtBikeMiles.text, measure: "bike"});
					model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chart.getItemAt(0).data.addItemAt( newBike, bikeStartIndex );
					
					if(Number(txtBike.text) > (model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chartMax - 10)) model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chartMax = Number(txtBike.text) + 10;
					else if(Number(txtBike.text) < (model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chartMin + 10)) model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf( ExerciseType.BIKE ) ).chartMin = Number(txtBike.text) - 10;
					
					if(new Date(dateChooser.text) > new Date(model.bikeMax)) model.bikeMax = dateChooser.text;
					
					//	here maybe if you want you could do it so that this is true IF the new date (PLUS 30 DAYS) is greater than the weightChartMax
					if( new Date(dateChooser.text) > model.bikeChartMax ) 
					{
						var myNewDate2:Date = new Date(dateChooser.text);
						if(myNewDate2.getDate() < 22) myNewDate2.setDate(22);		//this is a quick fix to ensure the graph doesn't get resized due to the position of the axis's labels.
						
						myNewDate2.setMonth(myNewDate2.getMonth() + 1);
						
						model.bikeChartMax = myNewDate2;
					}
				}
				
				if(txtComments.text != "") 
				{
					var newComment:Object = new Object();
					newComment = ({type:'patient',expectation:'expectation',author:AppProperties.getInstance().controller.model.user.fullName,datePatient:dateChooser.text,comments:txtComments.text, measure:'comments'});
					
					model.exerciseDataByMeasurePhysicianAssigned.getItemAt( model.exercisePAIndices.indexOf('comments') ).chart.getItemAt(0).data.push( newComment );
					
					if( new Date(dateChooser.text ) > new Date(model.commentsMax)) model.exPAcommentsMax = dateChooser.text;
				}

				var newChartMax:Date = new Date(dateChooser.text);
				newChartMax.setDate(newChartMax.getDate() + 8);
				
				//	this is a quick and dirty way of forcing the chart to refresh, by resetting model.chartMax (in this case to itself)
				var newChartMaxDummy:Date = new Date(model.chartMaxExPA.getFullYear(), model.chartMaxExPA.getMonth(), model.chartMaxExPA.getDate());
				
				if(new Date(dateChooser.text) > model.chartMaxExPA) model.chartMaxExPA = newChartMax;		//may need to re-do this in a way so the chartMax is always reset, cause apparently the charts only get updated when this gets updated.
				else model.chartMaxExPA = newChartMaxDummy;//.setDate(model.chartMax.getDate() + 1);// = model.chartMax;
				
				//ADDING TO exerciseDataPhysicianAssigned FOR THE LIST VIEW
				//if any field is entered?
				var entryByDate:Object = new Object();
				entryByDate = {date: DateUtil.get10DigitDate(dateChooser.text), runWalk: txtRunWalk.text, runWalkMiles: txtRunWalkMiles.text, bike: txtBike.text, bikeMiles: txtBikeMiles.text, expectation:'expectation', comments:txtComments.text, type:'patient'};
				model.exerciseDataPhysicianAssigned.addItem( entryByDate );
				
				model.exerciseDataByMeasurePhysicianAssigned.refresh();
				model.exerciseDataPhysicianAssigned.refresh();
				
				var event:ApplicationEvent = new ApplicationEvent( ApplicationEvent.SHOW_STATUS, true );
				event.data = "Your exercise has been recorded";
				AppProperties.getInstance().controller.application.dispatchEvent( event );
				
				PopUpManager.removePopUp(this);
			}
			
			private function browseAttachment(evt:MouseEvent):void 
			{
				fileReference.browse();
			}
			
			private function fileReference_select(evt:Event):void 
			{
				fileReference.load();
			}
			
			private function fileReference_complete(evt:Event):void 
			{
				var myRecordResults2Window:recordResults2Window = recordResults2Window(PopUpManager.createPopUp(this.parent, recordResults2Window) as spark.components.TitleWindow);
				PopUpManager.centerPopUp(myRecordResults2Window);
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<net:FileReference 
			id="fileReference"
			select="fileReference_select(event);"
			complete="fileReference_complete(event);" />
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingTop="13" paddingBottom="13" paddingLeft="13" paddingRight="13" />
	</s:layout>

	<s:Label text="Record Results" fontWeight="bold" fontSize="16" color="0x4D4D4D" />
	<s:Label text="You can manually record results:" color="0x4D4D4D" paddingTop="8" paddingBottom="7" />
	
	<s:VGroup gap="5">
		
		<s:Line xFrom="0" xTo="344">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" alpha=".5" />
			</s:stroke>
		</s:Line>
		
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="20" paddingRight="20">
			
			<s:Image source="@Embed('/images/arrowLeft.png')" click="navigate(-1)" buttonMode="true" />
			
			<s:HGroup width="100%" horizontalAlign="center">
				<mx:DateField id="dateChooser" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark" labelFunction="getDateLabel" />
			</s:HGroup>
			
			<s:Image id="navigateNext" source="@Embed('/images/arrowRight.png')" click="navigate(1)" buttonMode="true" toolTip="{navigateNext.enabled?'':'Future intakes cannot be recorded.'}" />
			
		</s:HGroup>
		
		<s:Line xFrom="0" xTo="344">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" alpha=".5" />
			</s:stroke>
		</s:Line>
		
	</s:VGroup>
	
	<s:HGroup paddingTop="12" verticalAlign="middle" gap="5">
		<s:Label text="Run / Walk:" textAlign="right" width="103" paddingRight="7" />
		<s:TextInput id="txtRunWalk" width="62" height="24" />
		<s:Label text="minutes" color="0x666666" />
	</s:HGroup>
	
	<s:HGroup paddingTop="2" verticalAlign="middle" gap="5" paddingLeft="108">
		<s:TextInput id="txtRunWalkMiles" width="62" height="24" />
		<s:Label text="miles" color="0x666666" />
	</s:HGroup>
	
	<s:HGroup paddingTop="16" verticalAlign="middle" gap="5">
		<s:Label text="Bike:" textAlign="right" width="103" paddingRight="7" />
		<s:TextInput id="txtBike" width="62" height="24" />
		<s:Label text="minutes" color="0x666666" />
	</s:HGroup>
	
	<s:HGroup paddingTop="2" verticalAlign="middle" gap="5" paddingLeft="108">
		<s:TextInput id="txtBikeMiles" width="62" height="24" />
		<s:Label text="miles" color="0x666666" />
	</s:HGroup>
	
	<s:HGroup paddingTop="21" gap="12" verticalAlign="top">
		<s:Label text="Comments:" textAlign="right" width="96" paddingTop="8" />
		<s:TextArea id="txtComments" width="225" height="71" />
	</s:HGroup>
	
	<s:Label text="OR" paddingTop="3" paddingBottom="6" />
	
	<s:HGroup width="100%">
		<s:Label text="Import data from your device." paddingTop="6" />
		<s:Spacer width="100%" />
		<mx:LinkButton id="btnBrowseFile" label="Browse file >" color="0x064E71" textRollOverColor="0x064E71" textSelectedColor="0x064E71" skin="{null}" rollOver="btnBrowseFile.styleName='linkBtnUnderline';" rollOut="btnBrowseFile.styleName='linkBtn';" click="browseAttachment(event)"/>
	</s:HGroup>	

	<s:HGroup paddingTop="25" paddingBottom="6">
		<s:Line xFrom="0" xTo="344">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" weight="1"/>
			</s:stroke>
		</s:Line>
	</s:HGroup>
	
	<s:HGroup width="100%" horizontalAlign="right">
		<s:Button label="Add Record" styleName="buttonText" height="24" click="addRecord()" />
		<s:Button label="Cancel" click="PopUpManager.removePopUp(this);" styleName="buttonText" height="24" width="55" />
	</s:HGroup>
	
</s:TitleWindow>