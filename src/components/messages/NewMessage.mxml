<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:net="flash.net.*"
					fontSize="11" label="New message" creationComplete="populateIfDraft()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			[Bindable] public var draftMessage:Object;
			
			protected function handleClose():void {
				if(messageText.text == "" || draftMessage != null) {
					parent.removeChild(this);
					//parentApplication.viewStackMessages.removeChild(this);
					parentApplication.arrOpenTabs.splice(parentApplication.viewStackMessages.selectedIndex-1,1);
					parentApplication.arrNewMessages.splice(parentApplication.arrNewMessages.indexOf(this),1);
					parentApplication.viewStackMessages.selectedIndex--;
				}
				else {
					Alert.show("Are you sure you want to discard your message?","Message will be deleted permanently",Alert.YES | Alert.CANCEL,this,alertListener);
				}
			}
			
			private function alertListener(eventObj:CloseEvent):void {
				// Check to see if the YES button was pressed.
				if (eventObj.detail==Alert.YES) {
					parent.removeChild(this);
					parentApplication.arrOpenTabs.splice(parentApplication.viewStackMessages.selectedIndex-1,1);
					parentApplication.arrNewMessages.splice(parentApplication.arrNewMessages.indexOf(this),1);
					parentApplication.viewStackMessages.selectedIndex--;
				}
			}

			protected function btnSend_clickHandler():void {
				if(draftMessage == null) {
					var newMessage:Object = new Object();
					newMessage = ({status: "read", correspondent: cbRecipients.selectedItem, prefix: "", date: new Date(), subject: cbSubjects.selectedItem, isDraft: false, messages: [
						{sender: "You", date: new Date(), text: messageText.text, imageAttachments: arrImageAttachments, nonImageAttachments: arrNonImageAttachments, urgency: dropUrgency.selectedItem.label}
					]
					});
					parentApplication.acMessages.addItemAt(newMessage,0);
				}
				else {
					draftMessage.correspondent = cbRecipients.selectedItem;
					draftMessage.date = new Date();
					draftMessage.subject = cbSubjects.selectedItem;
					draftMessage.isDraft = false;
					draftMessage.messages[0].date = new Date();
					draftMessage.messages[0].text = messageText.text;
					draftMessage.messages[0].imageAttachments = arrImageAttachments;
					draftMessage.messages[0].nonImageAttachments = arrNonImageAttachments;
					draftMessage.messages[0].urgency = dropUrgency.selectedItem.label;
					parentApplication.btnDrafts.label = 'Drafts'+parentApplication.getDraftMessagesCount();
				}
				parent.removeChild(this);
				parentApplication.arrOpenTabs.splice(parentApplication.viewStackMessages.selectedIndex-1,1);
				parentApplication.arrNewMessages.splice(parentApplication.arrNewMessages.indexOf(this),1);
				if(parentApplication.currentMainBox == "Sent" || parentApplication.currentMainBox == "Drafts") parentApplication.showSentMessages();
				else parentApplication.viewStackMessages.selectedIndex--;
			}
			
			protected function btnSaveDraft_clickHandler(event:MouseEvent):void {
				if(draftMessage == null) {
					var newMessage:Object = new Object();
					newMessage = ({status: "read", correspondent: cbRecipients.selectedItem, prefix: "", date: new Date(), subject: cbSubjects.selectedItem, isDraft: true, messages: [
						{sender: "You", date: new Date(), text: messageText.text, imageAttachments: arrImageAttachments, nonImageAttachments: arrNonImageAttachments, urgency: dropUrgency.selectedItem.label}
					]
					});
					parentApplication.acMessages.addItemAt(newMessage,0);
					parentApplication.btnDrafts.label = 'Drafts'+parentApplication.getDraftMessagesCount();
				}
				else {
					draftMessage.correspondent = cbRecipients.selectedItem;
					draftMessage.date = new Date();
					draftMessage.subject = cbSubjects.selectedItem;
					draftMessage.messages[0].date = new Date();
					draftMessage.messages[0].text = messageText.text;
					draftMessage.messages[0].imageAttachments = arrImageAttachments;
					draftMessage.messages[0].nonImageAttachments = arrNonImageAttachments;
					draftMessage.messages[0].urgency = dropUrgency.selectedItem.label;
				}
				
				parent.removeChild(this);
				parentApplication.arrOpenTabs.splice(parentApplication.viewStackMessages.selectedIndex-1,1);
				parentApplication.arrNewMessages.splice(parentApplication.arrNewMessages.indexOf(this),1);
				if(parentApplication.currentMainBox == "Drafts") parentApplication.showDraftMessages();
				else parentApplication.viewStackMessages.selectedIndex--;
			}
			
			private function populateIfDraft():void {
				if(draftMessage != null) {
					messageText.text = draftMessage.messages[0].text;
					cbSubjects.selectedItem = draftMessage.subject;
					cbRecipients.selectedItem = draftMessage.correspondent;
					if(draftMessage.messages[0].imageAttachments.length > 0 && draftMessage.messages[0].imageAttachments != null) {
						arrImageAttachments.addAll(draftMessage.messages[0].imageAttachments);
						dgAttachments.visible = true;
						dgAttachments.includeInLayout = true;
						btnAttachment.label = "Attach another file";
					}
					if(draftMessage.messages[0].nonImageAttachments.length > 0 && draftMessage.messages[0].nonImageAttachments != null) {
						arrNonImageAttachments.addAll(draftMessage.messages[0].nonImageAttachments);
						listAttachments.visible = true;
						listAttachments.includeInLayout = true;
						btnAttachment.label = "Attach another file";
					}
				}
			}

			/*Refer to http://blog.flexexamples.com/2008/08/25/previewing-an-image-before-uploading-it-using-the-filereference-class-in-flash-player-10/ */		
			private function browseAttachment(evt:MouseEvent):void {
				/*var arr:Array = [];
				arr.push(new FileFilter("Images", "*.gif;*.jpeg;*.jpg;*.png"));*/
				fileReference.browse();
			}

			private function fileReference_select(evt:Event):void {
				fileReference.load();
			}
			
			[Bindable] public var arrImageAttachments:ArrayCollection = new ArrayCollection();
			[Bindable] public var arrNonImageAttachments:ArrayCollection = new ArrayCollection();
				
			private function fileReference_complete(evt:Event):void {
				var myAttachment:Object;
				if(isImage(fileReference.name)) {
					myAttachment = {image: fileReference.data, filename: fileReference.name};
					arrImageAttachments.addItem(myAttachment);
					dgAttachments.visible = true;
					dgAttachments.includeInLayout = true;
				}
				else {
					myAttachment = {file: fileReference.data, filename: fileReference.name, filesize: fileSize(fileReference.size)};
					arrNonImageAttachments.addItem(myAttachment);
					listAttachments.visible = true;
					listAttachments.includeInLayout = true;
				}
				
				//Alert.show(ObjectUtil.toString(fileReference));
				btnAttachment.label = "Attach another file";
			}
			
			//using "type" wasn't working on this OS
			private function isImage(filename:String):Boolean {
				if(filename.substr(-4) == ".jpg" || filename.substr(-5) == ".jpeg" || filename.substr(-4) == ".gif" || filename.substr(-4) == ".png" || filename.substr(-4) == ".JPG" || filename.substr(-5) == ".JPEG" || filename.substr(-4) == ".GIF" || filename.substr(-4) == ".PNG") return true;
				return false;
			}
			
			private function fileSize(bytes:int):String {
				if(bytes < 1024*1024) return '(' + Math.round(bytes/1024) + 'KB)';
				else return '(' + int((bytes/(1024*1024))*10)/10 + 'MB)';
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!--http://blog.flexexamples.com/2008/08/25/previewing-an-image-before-uploading-it-using-the-filereference-class-in-flash-player-10/-->
		<net:FileReference id="fileReference"
						   select="fileReference_select(event);"
						   complete="fileReference_complete(event);" />
	</fx:Declarations>
	
	<s:BorderContainer height="37" width="100%" backgroundColor="0x706F6F">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" paddingLeft="10"/>
		</s:layout>
		<s:Button id="btnSend" label="Send" styleName="buttonText" height="24" width="50" click="btnSend_clickHandler()" />
		<s:Button label="Save Draft" styleName="buttonText" height="24" click="btnSaveDraft_clickHandler(event)" />
		<s:Button label="Cancel" styleName="buttonText" height="24" width="58" click="handleClose()" />
	</s:BorderContainer>
	<s:Form>
		<s:layout>
			<s:FormLayout gap="-5" paddingLeft="-10" paddingTop="-10" />
		</s:layout>
		<s:FormItem label="Subject:" color="0xFFFFFF">
			<s:ComboBox id="cbSubjects" prompt="Select a subject" width="454" color="0x4D4D4D" change="{this.label = cbSubjects.selectedItem; cbRecipients.selectedIndex = cbSubjects.selectedIndex;}">
				<s:dataProvider>
					<mx:ArrayList>	<!--if you wanted, you could set this to objects instead of strings, so they would have (1) the label, and (2) the recipient type specified-->
						<fx:String>Question about my medication</fx:String>
						<fx:String>Question about my recovery</fx:String>
						<fx:String>Question about billing</fx:String>
						<fx:String>Scheduling an appointment</fx:String>
					</mx:ArrayList>
				</s:dataProvider>
			</s:ComboBox>
		</s:FormItem>
		<s:FormItem label="To:" color="0xFFFFFF">
			<s:ComboBox id="cbRecipients" prompt="Select a recipient" width="454" color="0x4D4D4D">
				<s:dataProvider>
					<mx:ArrayList>
						<fx:String>a Physician</fx:String>
						<fx:String>a Nurse</fx:String>
						<fx:String>an Administrator</fx:String>
						<fx:String>Front Desk</fx:String>
					</mx:ArrayList>
				</s:dataProvider>
			</s:ComboBox>
		</s:FormItem>
		<s:FormItem>
			<s:VGroup paddingLeft="24" width="430">
				<mx:DataGrid id="dgAttachments" dataProvider="{arrImageAttachments}" width="430" maxHeight="270" headerHeight="0" borderVisible="false" verticalGridLines="false" horizontalGridLines="false" visible="false" includeInLayout="false" variableRowHeight="true" wordWrap="true" alternatingItemColors="{0x4A4A49,0x4A4A49}" selectable="false">
					<mx:columns>
						<mx:DataGridColumn paddingLeft="15" wordWrap="true">
							<mx:itemRenderer>
								<fx:Component>
									<mx:Canvas horizontalCenter="0">
										<fx:Script>
											<![CDATA[
												protected function delete_clickHandler(event:MouseEvent):void {
													//outerDocument.arrAttachments.splice(outerDocument.arrAttachments.indexOf(data),1);
													outerDocument.arrImageAttachments.removeItemAt(outerDocument.arrImageAttachments.getItemIndex(data));
													if(outerDocument.arrImageAttachments.length == 0) outerDocument.dgAttachments.includeInLayout = false;
													if(outerDocument.arrImageAttachments.length == 0 && outerDocument.arrNonImageAttachments.length == 0) outerDocument.btnAttachment.label = "Add attachment";
												}
											]]>
										</fx:Script>
										<mx:Image id="imgAttachment" source="{data.image}" maxWidth="430" maxHeight="430" horizontalAlign="center" horizontalCenter="0" /> <!--visible="false" includeInLayout="false"-->
										<mx:Image source="@Embed('images/messagesDelete.png')" toolTip="Delete image attachment" buttonMode="true" right="5" top="5" click="delete_clickHandler(event)" />
									</mx:Canvas>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
				
				<s:TextArea id="messageText" width="430" fontSize="12" heightInLines="7" />
				<s:HGroup width="430" verticalAlign="top">
					<s:VGroup>
						<s:List id="listAttachments" dataProvider="{arrNonImageAttachments}" visible="false" includeInLayout="false" contentBackgroundAlpha="0" borderAlpha="0" color="0xAEDEE4">
							<s:layout>
								<s:VerticalLayout requestedRowCount="{arrNonImageAttachments.length}" gap="-2" />
							</s:layout>
							<s:itemRenderer>
								<fx:Component>
									<mx:HBox horizontalGap="0" verticalAlign="middle">
										<fx:Script>
											<![CDATA[
												protected function delete_clickHandler(event:MouseEvent):void {
													//outerDocument.arrAttachments.splice(outerDocument.arrAttachments.indexOf(data),1);
													outerDocument.arrNonImageAttachments.removeItemAt(outerDocument.arrNonImageAttachments.getItemIndex(data));
													if(outerDocument.arrNonImageAttachments.length == 0) outerDocument.listAttachments.includeInLayout = false;
													if(outerDocument.arrImageAttachments.length == 0 && outerDocument.arrNonImageAttachments.length == 0) outerDocument.btnAttachment.label = "Add attachment";
												}
											]]>
										</fx:Script>
										<mx:Label text="{data.filename}" color="0xAEDEE4" />
										<mx:Label text="{data.filesize}" color="0xFFFFFF" />
										<mx:Image source="@Embed('images/messagesDelete.png')" toolTip="Delete attachment" buttonMode="true" click="delete_clickHandler(event)" />
									</mx:HBox>
								</fx:Component>
							</s:itemRenderer>
						</s:List>

						<mx:LinkButton id="btnAttachment" label="Add attachment" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" fontSize="12" skin="{null}" paddingLeft="-2" paddingTop="-5" click="browseAttachment(event)" rollOver="btnAttachment.styleName='linkBtnUnderline';" rollOut="btnAttachment.styleName='linkBtn';" />
					</s:VGroup>
					<s:Spacer width="100%" />
					<s:DropDownList id="dropUrgency" selectedIndex="0" styleName="buttonText" height="24" width="126" skinClass="skins.messages.CustomDropdownListWithIcon">
						<s:dataProvider>
							<s:ArrayList>
								<fx:Object label="Not urgent" />
								<fx:Object label="Somewhat urgent" icon="@Embed('images/messagesSomewhatUrgent.png')" />
								<fx:Object label="Urgent" icon="@Embed('images/messagesUrgent.png')" />
							</s:ArrayList>							
						</s:dataProvider>
					</s:DropDownList>
					<s:Button id="btnSend2" label="Send" styleName="buttonText" height="24" click="btnSend_clickHandler()" />
					<s:Button label="Cancel" styleName="buttonText" height="24" click="handleClose()"/>
				</s:HGroup>
			</s:VGroup>
		</s:FormItem>
	</s:Form>
</s:NavigatorContent>
