<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="355" height="323"
			   close="PopUpManager.removePopUp(this);" skinClass="skins.general.myHeaderlessTitleWindow" color="0x000000" creationComplete="fillUnits()">
	<fx:Script>
		<![CDATA[
			import controllers.VitalSignsController;
			
			import events.VitalsEvent;
			
			import models.modules.VitalSignsModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectProxy;
			
			import spark.components.TextInput;
			import spark.events.DropDownEvent;
			
			import util.DateUtil;
			
			[Bindable] private var controller:VitalSignsController = AppProperties.getInstance().controller.vitalSignsController as VitalSignsController;
			[Bindable] private var model:VitalSignsModel = controller.model as VitalSignsModel;
			
			//THE FOLLOWING TWO ARE MONSTER FUNCTIONS THAT PREVENT THE DROPDOWN FROM CLOSING WHEN CLICKING ON THE CALENDAR
			//SEE http://www.blastanova.com/blog/2010/06/23/a-custom-multi-selection-spark-dropdownlist/ FOR REFERENCE
			protected function dropDownCalendar_openHandler(event:DropDownEvent):void
			{
				dateChooser.addEventListener(MouseEvent.MOUSE_DOWN, stopPropagation, false, 0, true);
			}
			protected function stopPropagation(event:Event):void 
			{
				event.stopImmediatePropagation();
			}
			
			protected function dateChooser_changeHandler(event:CalendarLayoutChangeEvent):void 
			{
				txtDate.text = dateChooser.displayedMonth + 1 + '/' + dateChooser.selectedDate.date + '/' + dateChooser.displayedYear;
				dropDownCalendar.closeDropDown(true);					
			}
			
			[Bindable] public var trackerName:String;
			
			private function fillUnits():void 
			{
				if(trackerName == 'Blood glucose') txtUnits.text = 'mg/dL';
				else if(trackerName == 'Oxygen saturation') txtUnits.text = 'SpO2';
				else if(trackerName == 'Body fat percentage') txtUnits.text = '%';
			}
			
			private function addRecord():void 
			{
				var chartMax:int = (Number(txtResult.text) > txtGoal.value) ? Number(txtResult.text) + 10 : txtGoal.value + 10;
				var chartMin:int = (Number(txtResult.text) < txtGoal.value) ? Number(txtResult.text) - 10 : txtGoal.value - 10;
				var yesterday:Date = new Date(new Date().getTime() - (1000*60*60*24));
				
				var newVital:Object = new Object();
				newVital = ({value:Number(txtResult.text), expectation:txtGoal.value, date: DateUtil.get10DigitDate((yesterday.getMonth()+1) + "/" + yesterday.getDate() + "/" + yesterday.getFullYear()), type:'patient', vital:txtName.text});
				
				var newVital2:Object = new Object();
				newVital2 = ({value:Number(txtResult.text), expectation:txtGoal.value, date: DateUtil.get10DigitDate(txtDate.text), type:'patient', vital:txtName.text}); 
				
				var vital:Object = 
					{
						vital: txtName.text, 
						chartType: "normal", 
						chartMin: chartMin, chartMax: chartMax, 
						units: txtUnits.text, 
						chart: new ArrayCollection
						( 
							[
								{ 
									data: new ArrayCollection()
								}
							]
						)
					};
				
				model.vitalSigns.addItemAt( vital, model.vitalSigns.length );
				model.vitalSigns.refresh();
				model.vitalSigns.getItemAt( model.vitalSigns.length - 2 ).chart.getItemAt(0).data.source.splice(0,0,newVital,newVital2);
				model.vitalSigns.refresh();				
				
				var event:VitalsEvent = new VitalsEvent( VitalsEvent.ADD_TRACKER, true );
				event.data = vital
				dispatchEvent( event );
				
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingTop="13" paddingBottom="13" paddingLeft="13" paddingRight="13" />
	</s:layout>

	<s:Label text="Create Your Own Tracker" fontWeight="bold" fontSize="16" color="0x4D4D4D" />
	
	<s:HGroup paddingTop="10" verticalAlign="middle" gap="5">
		<s:Label text="Tracker name:" textAlign="right" width="116" paddingRight="7" />
		<s:TextInput id="txtName" width="150" height="24" text="{trackerName}" />
	</s:HGroup>
	<s:HGroup paddingTop="2" verticalAlign="middle" gap="5">
		<s:Label text="Unit of Measurement:" textAlign="right" width="116" paddingRight="7" />
		<s:TextInput id="txtUnits" width="150" height="24" />
		<s:Label text="e.g.: lbs, %" color="0x666666" />
	</s:HGroup>
	<s:HGroup paddingTop="2" verticalAlign="middle" gap="5">
		<s:Label text="Goal:" textAlign="right" width="116" paddingRight="7" />
		<s:NumericStepper id="txtGoal" value="0" maximum="100000" width="86" />
		<s:Label text="{txtUnits.text}" color="0x666666" />
	</s:HGroup>
	
	<s:HGroup paddingTop="11" paddingBottom="9">
		<s:Line xFrom="0" xTo="326">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" weight="1"/>
			</s:stroke>
		</s:Line>
	</s:HGroup>
	
	<s:Label text="My First Entry" fontWeight="bold" fontSize="16" color="0x4D4D4D" />
	
	<s:HGroup paddingTop="10" verticalAlign="middle" gap="5">
		<s:Label text="Result:" textAlign="right" width="116" paddingRight="7" />
		<s:TextInput id="txtResult" width="86" height="24" textAlign="right" />
		<s:Label text="{txtUnits.text}" color="0x666666" />
	</s:HGroup>
	<s:HGroup paddingTop="2" verticalAlign="middle" gap="5">
		<s:Label text="Date:" textAlign="right" width="116" paddingRight="7" />
		<s:TextInput id="txtDate" width="86" height="24" text="{(new Date().getMonth() + 1) + '/' + new Date().getDate() + '/' + new Date().getFullYear()}" />
		<s:HGroup paddingTop="-2" paddingLeft="-3">
			<s:DropDownList id="dropDownCalendar" dropShadowVisible="false" skinClass="skins.general.MyCalendarDropDownListSkin" itemRenderer="spark.skins.spark.DefaultComplexItemRenderer" width="25" requireSelection="false" open="dropDownCalendar_openHandler(event)" click="{event.stopImmediatePropagation()}"> 
				<s:dataProvider>
					<s:ArrayList>
						<mx:DateChooser id="dateChooser" showToday="true"
										contentBackgroundColor="0x3C3C3B" borderColor="0x4D4D4D" color="0xEDEDED" headerColors="[0xF7F7F7,0xB3B3B3]" selectionColor="0x585858" rollOverColor="0x3C3C3B" todayColor="0xD6D6D6" headerStyleName="dateChooserVitalGrayHeader"
										fontSize="11" change="dateChooser_changeHandler(event)" />
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</s:HGroup>
	</s:HGroup>

	<s:HGroup paddingTop="11" paddingBottom="6">
		<s:Line xFrom="0" xTo="326">
			<s:stroke>
				<s:SolidColorStroke color="0x4D4D4D" weight="1"/>
			</s:stroke>
		</s:Line>
	</s:HGroup>
	
	<s:HGroup width="100%" horizontalAlign="right">
		<s:Button label="Submit" styleName="buttonText" height="24" width="55" click="addRecord()" />
		<s:Button label="Cancel" click="PopUpManager.removePopUp(this);" styleName="buttonText" height="24" width="55" />
	</s:HGroup>
</s:TitleWindow>
