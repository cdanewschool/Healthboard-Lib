<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	skinClass="skins.general.myHeaderlessTitleWindow" 
	color="0x000000" 
	width="457" height="390" 
	creationComplete="init()" show="onShow();">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="dateGroup" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import controllers.MedicalRecordsController;
			
			import models.modules.MedicalRecordsModel;
			
			import mx.managers.PopUpManager;
			
			import spark.components.CheckBox;
			
			[Bindable] private var controller:MedicalRecordsController = AppProperties.getInstance().controller.medicalRecordsController as MedicalRecordsController;
			[Bindable] private var model:MedicalRecordsModel = controller.model as MedicalRecordsModel;
			
			private var recommendationsForFacility:Array = ["Alexander technique", "Gentle Chair Yoga Class", "Pilates", "Yoga for beginners"];
			
			private function save():void
			{
				var recommendations:Array = [];
				
				for(var i:int=0;i<recommendationsContainer.numElements;i++) 
				{
					if( CheckBox(recommendationsContainer.getElementAt(i)).selected )
					{
						recommendationsForFacility[i];
					}
				}
				
				var startDate:Date = dateFrom.selectedDate;
				
				var nextStep:Object = 
					{ 
						task: message.text, completed: false, removed: false, recommendation: recommendations.join(', '), 
						date: startDate.hours + ':' + startDate.minutes + ', ' + Constants.MONTHS[ startDate.month ] + ' ' + startDate.date + ', ' + startDate.fullYear
					};
				
				model.medicalRecordsNextSteps.addItemAt( nextStep, 0 );
				
				close();
			}
			
			private function clear():void
			{
				var today:Date = AppProperties.getInstance().controller.model.today;
				
				dateGroup.selectedValue = 0;
				message.text = "";				
				dateFrom.selectedDate = today;
				dateTo.selectedDate = today;
				urgency.selectedIndex = 2;
				
				updateAllCheckboxes( false );
			}
			
			private function close():void
			{
				PopUpManager.removePopUp( this );
			}
			
			private function onCheckAllClick():void
			{
				updateAllCheckboxes( true );
			}
			
			private function onClearAllClick():void
			{
				updateAllCheckboxes( false );
			}
			
			private function updateAllCheckboxes( select:Boolean ):void
			{
				for(var i:int=0;i<recommendationsContainer.numElements;i++) CheckBox(recommendationsContainer.getElementAt(i)).selected = select;
			}
			
			private function onShow():void
			{
				recommendationsContainer.removeAllElements();
				
				for(var i:int=0;i<recommendationsForFacility.length;i++)
				{
					var checkbox:CheckBox = new CheckBox();
					checkbox.label = recommendationsForFacility[i];
					recommendationsContainer.addElement( checkbox );
				}	
			}
			
			private function init():void
			{
				onShow();
				
				clear();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingTop="10" paddingRight="10" paddingBottom="10" paddingLeft="10" gap="15" />
	</s:layout>
	
	<s:Label id="header" text="Set Next Steps" styleName="darkGrayBold16" />
	
	<s:HGroup paddingLeft="90">
		<s:RadioButton label="Start Date" value="0" group="{dateGroup}" selected="true" />
		<s:RadioButton label="Date Range" value="1" group="{dateGroup}" />
	</s:HGroup>
	
	<s:HGroup paddingLeft="90">
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="from" styleName="darkGray12Italic" />
			<mx:DateField id="dateFrom" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark" />
		</s:HGroup>
		
		<s:HGroup visible="{dateGroup.selectedValue == 1}" verticalAlign="middle">
			<s:Label text="to" styleName="darkGray12Italic" />
			<mx:DateField id="dateTo" textFieldClass="mx.core.UIFTETextField" textInputClass="mx.controls.MXFTETextInput" width="100" height="24" dateChooserStyleName="dateChooserDark" />
		</s:HGroup>
		
	</s:HGroup>
	
	<s:HGroup paddingLeft="40">
		<s:Label text="Message" styleName="black12" />
		<s:TextArea id="message" width="344" height="93" />
	</s:HGroup>
	
	<s:VGroup paddingLeft="90" paddingTop="-5">
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="Recommended Classes:" styleName="black12" />
			<mx:LinkButton label="Check All" click="onCheckAllClick()" styleName="linkBtnDarkBlue" paddingTop="-5" />
			<mx:LinkButton label="Clear All" click="onClearAllClick()" styleName="linkBtnDarkBlue" paddingTop="-5" />
		</s:HGroup>
		
		<s:VGroup id="recommendationsContainer" paddingLeft="50" gap="5" /> 
		
	</s:VGroup>
	
	<s:Line xFrom="0" xTo="{width-30}">
		<s:stroke>
			<s:SolidColorStroke color="#3F3E3D"/>
		</s:stroke>
	</s:Line>
	
	<s:HGroup width="100%" horizontalAlign="right">
		
		<s:DropDownList 
			id="urgency" styleName="buttonText" 
			height="24" width="135" 
			skinClass="skins.messages.CustomDropdownListWithIcon">
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object label="Not urgent" />
					<fx:Object label="Somewhat urgent" icon="@Embed('images/messagesSomewhatUrgent.png')" />
					<fx:Object label="Urgent" icon="@Embed('images/messagesUrgent.png')" />
				</s:ArrayList>							
			</s:dataProvider>
		</s:DropDownList>
		
		<s:Button label="Submit" styleName="buttonText" height="24" width="55" click="save()" />
		<s:Button label="Clear" styleName="buttonText" height="24" width="55" click="clear()" />
		<s:Button label="Cancel" styleName="buttonText" height="24" width="60" click="close()" />
		
	</s:HGroup>
	
</s:TitleWindow>
