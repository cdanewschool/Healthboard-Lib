<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.  

@see spark.skins.spark.TitleWindowCloseButtonSkin
@see spark.components.TitleWindow

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" blendMode="normal" mouseEnabled="false"
			 minWidth="76" minHeight="0" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5" xmlns:enhancedtitlewindow="external.collapsibleTitleWindow.components.enhancedtitlewindow.*" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Metadata>[HostComponent("external.collapsibleTitleWindow.components.enhancedtitlewindow.EnhancedTitleWindow")]</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		
		<![CDATA[
			
			import events.ApplicationDataEvent;
		
			/* Define the skin elements that should not be colorized. 
			For panel, border and title background are skinned, but the content area and title text are not. */
			static private const exclusions:Array = ["background", "titleDisplay", "subTitleDisplay", "contentGroup"];
			[Bindable] private var isWidgetClickable:Boolean;		//added (Damian)
			
			/**
			 * @private
			 */  
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				isWidgetClickable = (hostComponent.module != null);
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == true)
				{
					border.visible = true;
					background.left = background.top = background.right = background.bottom = 1;
					contents.left = contents.top = contents.right = contents.bottom = 1;
				}
				else
				{
					border.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					contents.left = contents.top = contents.right = contents.bottom = 0;
				}
				
				dropShadow.visible = getStyle("dropShadowVisible");
				
				var cr:Number = 3; //damian getStyle("cornerRadius");
				var withControls:Boolean = 
					(currentState == "disabledWithControlBar" || 
						currentState == "normalWithControlBar" ||
						currentState == "inactiveWithControlBar");
				
				if (cornerRadius != cr)
				{
					cornerRadius = cr;
					
					dropShadow.tlRadius = cornerRadius;
					dropShadow.trRadius = cornerRadius;
					dropShadow.blRadius = withControls ? cornerRadius : 0;
					dropShadow.brRadius = withControls ? cornerRadius : 0;
					
					setPartCornerRadii(topMaskRect, withControls); 
					setPartCornerRadii(border, withControls); 
					setPartCornerRadii(background, withControls);
				}
				
				if (bottomMaskRect) setPartCornerRadii(bottomMaskRect, withControls); 
				
				borderStroke.color = 0xBDBDBC;	//damian
				borderStroke.alpha = getStyle("borderAlpha");
				backgroundFill.color = 0x3C3C3B;	//damian
				backgroundFill.alpha = getStyle("backgroundAlpha");
				
				expandIndicator.visible = expandIndicator.includeInLayout = getStyle("showExpandIndicator");
				var barHeight:Number = getStyle("titleBarHeight");
				titleBarGroup.height = isNaN(barHeight) ? 20 : barHeight;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			/**
			 * @private
			 */  
			private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
			{            
				target.topLeftRadiusX = cornerRadius;
				target.topRightRadiusX = cornerRadius;
				target.bottomLeftRadiusX = cornerRadius;		//DB includeBottom ? cornerRadius : 0;
				target.bottomRightRadiusX = cornerRadius;		//DB includeBottom ? cornerRadius : 0;
			}
			
			private var cornerRadius:Number;
			
			[Bindable] [Embed("images/btnWidgetArrow.png")] public var myArrow:Class;
			[Bindable] [Embed("images/btnWidgetArrowOver.png")] public var myArrowOver:Class;
			//[Bindable] [Embed("images/widgetWarning.png")] public var widgetWarning:Class;
			
			private function handleHeaderClick():void {
				
				if(parentApplication.currentState == 'providerHome') {
					if(parentApplication.viewStackProviderModules.getChildByName(hostComponent.module)) parentApplication.viewStackProviderModules.selectedChild = parentApplication.viewStackProviderModules.getChildByName(hostComponent.module);
				}
				else {
					parentApplication.currentState = hostComponent.module;
					
					//the following if statements were originally written in "if(hostComponent.module == 'modCalendar' ANDAND parentApplication.shouldAddInitialAppointments) parentApplication.onApplicationStart()" form, but Flex was throwing strange errors regarding the ANDAND (with characters) use.
					if(hostComponent.module == 'modCalendar') 
					{
						if(parentApplication.shouldAddInitialAppointments) 
							parentApplication.onApplicationStart();
					}
					else if(hostComponent.module == 'modImmunizations') 
					{
						if(!parentApplication.wasImmunizationDataLoaded) 
							parentApplication.immunizationsXMLdata.send();
					}
					else if(hostComponent.module == 'modMedicalRecords') 
					{
						if(!AppProperties.getInstance().controller.medicalRecordsController.model.dataLoaded) 
						{
							var evt:ApplicationDataEvent = new ApplicationDataEvent( ApplicationDataEvent.LOAD, true );
							evt.data = "medicalRecords";
							dispatchEvent( evt );
						}
					}
					else if(hostComponent.module == 'modMedications') {
						if(!parentApplication.wasMedicationDataLoaded) parentApplication.medicationsXMLdata.send();
					}
				}
			}
		]]>
		
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="inactive" stateGroups="inactiveGroup" />
		<s:State name="disabled" />
		<s:State name="normalWithControlBar" stateGroups="withControls" />
		<s:State name="inactiveWithControlBar" stateGroups="withControls, inactiveGroup" />
		<s:State name="disabledWithControlBar" stateGroups="withControls" />
		<s:State name="collapsed" stateGroups="collapsedStates"/>
		<s:State name="disabledCollapsed" stateGroups="collapsedStates,disabledStates"/>
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="normal">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="normalWithControlBar">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="collapsed">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="disabled">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
		<s:Transition fromState="disabledWithControlBar">
			<s:Resize target="{contentGroup}" duration="400"/>
		</s:Transition>
	</s:transitions>
	
	<!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->
	<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.32" 
							 alpha.inactiveGroup="0.22" distance="11"  distance.inactiveGroup="7"
							 angle="90" color="0x000000" left="0" top="0" right="0" bottom="0"/>
	
	<!--- drop shadow can't be hittable so all other graphics go in this group -->
	<s:Group left="0" right="0" top="0" bottom="0">
		
		<!--- top group mask @private-->
		<s:Group left="1" top="1" right="1" bottom="1" id="topGroupMask">
			<!--- @private-->
			<s:Rect id="topMaskRect" left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<!--- bottom group mask @private-->
		<s:Group left="1" top="1" right="1" bottom="1" id="bottomGroupMask" 
				 includeIn="withControls">
			<!--- @private-->
			<s:Rect id="bottomMaskRect" left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<!--- layer 1: border @private -->
		<s:Rect id="border" left="0" right="0" top="0" bottom="0" bottom.collapsedStates="1">
			<s:stroke>
				<!--- Defines the TitleWindowSkin class's border stroke. The default value is 1. -->
				<s:SolidColorStroke id="borderStroke" weight="1" />
			</s:stroke>
		</s:Rect>
		
		<!-- layer 2: background fill -->
		<!--- Defines the appearance of the TitleWindowSkin class's background. -->
		<s:Rect id="background" left="1" top="1" right="1" bottom="1">
			<s:fill>
				<!--- Defines the TitleWindowSkin class's background fill. The default color is 0xFFFFFF. -->
				<s:SolidColor id="backgroundFill" color="#FFFFFF"/>
			</s:fill>
		</s:Rect>
		
		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group left="1" right="1" top="1" bottom="1" id="contents">
			<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="justify" />
			</s:layout>
			<!--- @private -->
			<s:Group id="topGroup" mask="{topGroupMask}">
				
				<!--- layer 0: title bar fill @private -->
				<s:Rect id="tbFill" left="0" right="0" top="0" bottom="1">
					<s:fill>
						<s:LinearGradient>
							<s:GradientEntry color="{!hostComponent.displayWarning ? 0x323231 : 0x6B3736}" /><!--damian--><!--color.inactiveGroup="0xEAEAEA"-->
							<s:GradientEntry color="0x757574" /><!--damian--><!--color.inactiveGroup="0xCECECE"-->
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				<!--- layer 1: title bar highlight @private -->
				<!--damian-->
				<!--<s:Rect id="tbHilite" left="0" right="0" top="0" bottom="0">		
				<s:stroke>
				<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xE6E6E6" />
				<s:GradientEntry color="0xFFFFFF" alpha="0.22"/>
				</s:LinearGradientStroke>
				</s:stroke>
				<s:fill>
				<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" alpha="0.15" />
				<s:GradientEntry color="0xFFFFFF" alpha="0.15" ratio="0.44"/>
				<s:GradientEntry color="0xFFFFFF" alpha="0" ratio="0.4401"/>
				</s:LinearGradient>
				</s:fill>
				</s:Rect>-->
				
				<!--- layer 2: title bar divider @private -->
				<!--damian-->
				<!--<s:Rect id="tbDiv" left="0" right="0" height="1" bottom="0">
				<s:fill>
				<s:SolidColor color="0x000000" alpha="0.75" />
				</s:fill>
				</s:Rect>-->
				
				<!-- layer 4: moveArea -->
				<!--- @copy spark.components.TitleWindow#moveArea -->
				<s:Group id="moveArea" left="0" right="0" top="0" bottom="0" click="{if(isWidgetClickable) handleHeaderClick()}" buttonMode="{isWidgetClickable}" />		<!--adding link on header's background?-->
				
				<!-- layer 3: text -->
				<!--- @copy spark.components.Panel#titleDisplay -->
				<s:Group id="titleBarGroup" left="6" right="6" top="1">
					<s:layout><s:HorizontalLayout verticalAlign="middle" gap="5"/></s:layout>
					<enhancedtitlewindow:TriangleIndicator id="expandIndicator"/>
					<s:VGroup paddingTop="-2" visible="{hostComponent.displayWarning}" includeInLayout="{hostComponent.displayWarning}">
						<s:Image source="@Embed('images/widgetWarning.png')" toolTip="{hostComponent.warningToolTip}" buttonMode="{isWidgetClickable}" click="{if(isWidgetClickable) handleHeaderClick();}" />
					</s:VGroup>
					<s:HGroup gap="15">
						<s:Label id="titleDisplay" maxDisplayedLines="1"
								 height="100%"
								 verticalAlign="middle" fontWeight="bold"
								 color="0xFFFFFF" fontSize="16" click="{if(isWidgetClickable) handleHeaderClick()}" buttonMode="{isWidgetClickable}" rollOver="{if(isWidgetClickable) titleDisplay.styleName='linkBtnUnderline'}" rollOut="{if(isWidgetClickable) titleDisplay.styleName='linkBtn'}">	<!--color+fontsize (damian)-->	<!--adding link on header's title-->
						</s:Label>
						<s:Label id="subTitleDisplay" maxDisplayedLines="1"
								 height="100%"
								 verticalAlign="middle" fontWeight="normal"
								 color="0x868686" fontSize="16" click="{if(isWidgetClickable) handleHeaderClick()}" buttonMode="{isWidgetClickable}">	<!--color+fontsize (damian)-->	<!--adding link on header's title-->
						</s:Label>
					</s:HGroup>
					
					<!--<s:Label visible="{hostComponent.module == 'modNutrition'}" includeInLayout="{hostComponent.module == 'modNutrition'}" click="{parentApplication.currentState = 'modNutrition'}" buttonMode="true" fontSize="16" color="0x868686" verticalAlign="middle" paddingLeft="2" text="{parentApplication.dateFormatterDay.format(new Date())}" />--><!--Replaced by Noah's subTitleDisplay above-->
					<s:Group id="titleBarContentGroup" width="100%" height="100%">
						<s:layout><s:HorizontalLayout/></s:layout>
					</s:Group>
					
					<!--- @copy spark.components.TitleWindow#closeButton -->
					<s:Image id="arrow" source="@Embed('images/btnWidgetArrow.png')" visible="{isWidgetClickable}" includeInLayout="{isWidgetClickable}" buttonMode="true" rollOver="{arrow.source=myArrowOver;}" rollOut="{arrow.source=myArrow;}" click="handleHeaderClick()" width="22" height="13" />	<!--adding link on header's arrow-->
					<s:HGroup paddingTop="-6" paddingLeft="-9" visible="{hostComponent.showDropDown}" includeInLayout="{hostComponent.showDropDown}">
						<s:DropDownList id="dropDownView" dropShadowVisible="false" dataProvider="{hostComponent.dropDownDataProvider}" skinClass="skins.general.HealthFocusOptionsDropDownListSkin" color="0x074F72" rollOverColor="0xAEDBE2" selectionColor="0xAEDBE2" width="19" fontSize="12" /><!--change="dropDownView_changeHandler(event)"-->
					</s:HGroup>
				</s:Group>
				
			</s:Group>
			
			<!--
			Note: setting the minimum size to 0 here so that changes to the host component's
			size will not be thwarted by this skin part's minimum size.   This is a compromise,
			more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup" width="100%" height="100%" height.collapsedStates="0" minWidth="0" minHeight="0" clipAndEnableScrolling="true">
			</s:Group>
			
			<!--- @private -->
			<s:Group id="bottomGroup" minWidth="0" minHeight="0" 
					 includeIn="withControls">  
				
				<s:Group left="0" right="0" top="0" bottom="0" mask="{bottomGroupMask}">
					
					<!-- layer 0: control bar divider line -->
					<s:Rect left="0" right="0" top="0" height="1" alpha="0.22">
						<s:fill>
							<s:SolidColor color="0x000000" />
						</s:fill>
					</s:Rect>
					
					<!-- layer 1: control bar highlight -->
					<s:Rect left="0" right="0" top="1" bottom="0">
						<s:stroke>
							<s:LinearGradientStroke rotation="90" weight="1">
								<s:GradientEntry color="0xFFFFFF" />
								<s:GradientEntry color="0xD8D8D8" />
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
					
					<!-- layer 2: control bar fill -->
					<s:Rect left="1" right="1" top="2" bottom="1">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0xEDEDED"/>
								<s:GradientEntry color="0xCDCDCD"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
				</s:Group>
				
				<!--- @copy spark.components.Panel#controlBarGroup -->
				<s:Group id="controlBarGroup" left="0" right="0" top="1" bottom="1" minWidth="0" minHeight="0">
					<s:layout>
						<s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7" gap="10" />
					</s:layout>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<!--- @copy spark.components.TitleWindow#closeButton -->
		<!--added down here (Damian) so that the button is displayed ON TOP / OUTSIDE the TitleWindow-->
		<s:Button id="closeButton" skinClass="{hostComponent.closeButtonSkinClass}" visible="{hostComponent.showCloseButton}" includeInLayout="{hostComponent.showCloseButton}"
				  click="{parentApplication.falsifyWidget(hostComponent.module);}"
				  width="21" height="21" right="-9" top="-12" /> <!-- (damian) orig: spark.skins.spark.TitleWindowCloseButtonSkin width="15" height="15"--><!--hostComponent.visible = false; hostComponent.includeInLayout = false; -->
	</s:Group>

</s:SparkSkin>
