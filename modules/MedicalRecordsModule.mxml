<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" show="onShow()"
	creationComplete="init()" xmlns:general="components.general.*" xmlns:plus="external.TabBarPlus.plus.*" xmlns:components="components.*">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			import ASclasses.MyCustomDataTip;
			
			import components.medicalRecords.ServiceDetails;
			import components.popups.MyNextStepsHistoryWindow;
			
			import controllers.MedicalRecordsController;
			
			import events.ApplicationDataEvent;
			import events.AppointmentEvent;
			
			import external.TabBarPlus.plus.TabPlus;
			
			import models.ApplicationModel;
			import models.modules.MedicalRecordsModel;
			
			import mx.charts.ChartItem;
			import mx.charts.DateTimeAxis;
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.items.PlotSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.ListEvent;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.managers.FocusManager;
			import mx.managers.PopUpManager;
			import mx.messaging.AbstractConsumer;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			
			import styles.ChartStyles;
			
			import util.ChartLabelFunctions;
			
			[Bindable] public var showHeader:Boolean = true;
			
			[Bindable] private var controller:MedicalRecordsController = AppProperties.getInstance().controller.medicalRecordsController as MedicalRecordsController;
			[Bindable] public var model:MedicalRecordsModel = controller.model as MedicalRecordsModel;
			[Bindable] private var chartStyles:ChartStyles = AppProperties.getInstance().controller.model.chartStyles;
			
			[Bindable] private var minDateMedRec:Date = new Date( "Nov 20 2010 01:03:54 AM");
			[Bindable] private var maxDateMedRec:Date = new Date( "Nov 20 2011 01:03:54 AM");
			
			private const SEARCH_PLACEHOLDER:String = "Search medical records";
			
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				if(tabsMedicalRecords.selectedIndex == 0) 
				{			
					medicalRecordsBottomBoxes.visible = medicalRecordsBottomBoxes.includeInLayout = true;
					viewStackMedicalRecords.height = 406;
				}
				else 
				{
					medicalRecordsBottomBoxes.visible = medicalRecordsBottomBoxes.includeInLayout = false;
					viewStackMedicalRecords.height = 602;
				}
			}
			
			private function filterMedRecFromTree():void 
			{
				model.medicalRecordsData.filterFunction = filterMedRec;
				model.medicalRecordsData.refresh();
				model.medicalRecordsDataGrid.filterFunction = null;
				model.medicalRecordsDataGrid.refresh();
				
				model.medicalRecordsCategories = new Array();
				for(var i:uint = 0; i < model.medicalRecordsData.length; i++) 
				{
					if(model.medicalRecordsCategories.indexOf(model.medicalRecordsData[i].name) == -1) 
						model.medicalRecordsCategories.push( model.medicalRecordsData[i].name );
				}
				
				plotMedicalRecords.height = model.medicalRecordsCategories.length * 28 + 24;
				myTreeMedRec.rowCount = model.medicalRecordsCategories.length;
				
				controller.updateMedRecHeightAndColors();
				
				if( header.search.text != SEARCH_PLACEHOLDER ) 
				{
					header.search.text = "";
					
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				}
			}
			
			private function filterMedRec(item:Object):Boolean 
			{
				var myOpenLeaves:Array = new Array();
				var arrMedRecCategories:Array = new Array("Visits","Diagnostic Studies","Surgeries","Procedures");
				var myOpenCategories:Array = new Array();
				
				for(var i:uint = 0; i < myTreeMedRec.openItems.length; i++)
				{
					myOpenCategories.push(myTreeMedRec.openItems[i].category);
				}
				
				var count:uint = 0;
				
				for(var x:uint = 0; x < arrMedRecCategories.length; x++) 
				{
					myOpenLeaves.push(arrMedRecCategories[x]);
					if(myOpenCategories.indexOf(arrMedRecCategories[x]) == -1) {
						//myOpenLeaves.push(arrMedCategories[x]);
						count--;
					}
					else
					{
						//myOpenLeaves.push(myTree.openItems[count].category);
						for(var j:uint = 0; j < myTreeMedRec.openItems[count].children.length; j++) {
							myOpenLeaves.push(myTreeMedRec.openItems[count].children[j].category);
						}
					}
					count++;
				}
				
				return myOpenLeaves.indexOf(item.name) != -1;
				
				//return dropMediFilter.selectedIndex == 0 ? myOpenLeaves.indexOf(item.name) != -1 && item.status != "inactive" : myOpenLeaves.indexOf(item.name) != -1;
				
				//var pattern:RegExp = new RegExp("[^]*"+medicationsSearch.text+"[^]*", "i");
				//return pattern.test(item.name) || pattern.test(item.dose) || pattern.test(item.type) || pattern.test(item.prescription) || pattern.test(item.directions) || pattern.test(item.pharmacy) || pattern.test(item.lastFilledDate);
			}
			
			private function medicalRecordsFillFunction(element:ChartItem, index:Number):IFill 
			{
				var c:SolidColor = chartStyles.colorMedicalRecordsOutpatient;	//blue
				var item:PlotSeriesItem = PlotSeriesItem(element);
				
				if(item.item.classification == "Inpatient") 
				{
					c = chartStyles.colorMedicalRecordsInpatient;		//orange
				}
				
				return c;
			}
			
			private function dataTipsMedicalRecords(hd:HitData):String 
			{
				var date:String = hd.item.classification == "Outpatient" ? hd.item.date : hd.item.inpdate;
				return "<i>" + hd.item.name + "</i><br><br><font color='#1D1D1B'>" + hd.item.reason + "<br>" + hd.item.provider + "<br>" + date + "</font><br><br><i>Click to view record</i>";
			}
			
			private function applyCustomDataTips():void 
			{
				plotMedicalRecords.setStyle("dataTipRenderer",MyCustomDataTip);    
			}
			
			private function showNextStepsHistory():void 
			{
				var myNextStepsHistory:MyNextStepsHistoryWindow = MyNextStepsHistoryWindow(PopUpManager.createPopUp(this, MyNextStepsHistoryWindow) as spark.components.TitleWindow);
				PopUpManager.centerPopUp(myNextStepsHistory);
			}
			
			private function lblMedicalRecordsDate(item:Object, column:DataGridColumn):String
			{
				return item.date != null ? item.date : item.inpdate;
			}
			
			private function lblMedicalRecordsNextSteps(item:Object, column:DataGridColumn):String
			{
				return item.nextSteps != null ? "Yes" : "";
			}
			
			private function switchMedicalRecordsView(index:uint):void 
			{
				viewsMedicalRecords.selectedIndex = index;
				
				if(index == 0) 
				{
					btnMedicalRecordsChart.setStyle("chromeColor", 0xFF931E);
					btnMedicalRecordsList.setStyle("chromeColor", 0xB3B3B3);
				}
				else {
					btnMedicalRecordsChart.setStyle("chromeColor", 0xB3B3B3);
					btnMedicalRecordsList.setStyle("chromeColor", 0xFF931E);
				}
			}
			
			private function showServiceDetails(e:ChartItemEvent):void
			{
				viewServiceDetails(e.hitData.item);
			}
			
			private function showServiceDetailsDG(e:ListEvent):void 
			{
				viewServiceDetails(e.itemRenderer.data);
			}
			
			public function viewServiceDetails(service:Object):void
			{
				var isServiceAlreadyOpen:Boolean = false;
				
				for(var j:uint = 0; j < model.openTabs.length; j++) 
				{
					if( model.openTabs[j] == service ) {
						isServiceAlreadyOpen = true;
						viewStackMedicalRecords.selectedIndex = j + 1;		//+1 because in arrOpenTabs we don't include the first tab
						break;
					}
				}				
				
				if(!isServiceAlreadyOpen) 
				{
					var serviceDetails:ServiceDetails = new ServiceDetails();
					serviceDetails.serviceData = service;
					viewStackMedicalRecords.addChild(serviceDetails);
					tabsMedicalRecords.selectedIndex = viewStackMedicalRecords.length - 1;
					model.openTabs.push(service);
				}
				
				medicalRecordsBottomBoxes.visible = medicalRecordsBottomBoxes.includeInLayout = false;
				//viewStackMedicalRecords.height = e.hitData.item.name == "Labs" ? 650 : 602;
				viewStackMedicalRecords.height = 602;
			}
			
			protected function tabsMedicalRecordsChangeHandler(event:IndexChangeEvent):void 
			{
				invalidateDisplayList();
			}
			
			private function medicalRecordsSetMinMax():void 
			{
				hAxisMedicalRecords.minimum = minDateMedRec;	//new Date( "Oct 1 2010 01:03:54 AM");
				hAxisMedicalRecords.maximum = maxDateMedRec;	//new Date( "Oct 1 2011 01:03:54 AM");
			}
			
			private function handleMedRecDateRange(range:String):void 
			{
				if(range == '1d') 
				{
					minDateMedRec = new Date( "Oct 6 2011 01:03:54 AM");
					maxDateMedRec = new Date( "Oct 8 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					chartStyles.medRecVerticalGridLine.alpha = 0;
					btnMed1w.selected = btnMed1m.selected = btnMed3m.selected = btnMed1y.selected = btnMed3y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == '1w') {
					minDateMedRec = new Date( "Oct 1 2011 01:03:54 AM");
					maxDateMedRec = new Date( "Oct 8 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					chartStyles.medRecVerticalGridLine.alpha = 0;
					btnMed1d.selected = btnMed1m.selected = btnMed3m.selected = btnMed1y.selected = btnMed3y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == '1m')
				{
					minDateMedRec = new Date("Sep 20 2011 01:03:54 AM");
					maxDateMedRec = new Date("Oct 20 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartDay;
					chartStyles.medRecVerticalGridLine.alpha = 0;
					btnMed1d.selected = btnMed1w.selected = btnMed3m.selected = btnMed1y.selected = btnMed3y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == '3m') 
				{
					minDateMedRec = new Date( "Jul 20 2011 01:03:54 AM");
					maxDateMedRec = new Date( "Oct 20 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartMonth;
					chartStyles.medRecVerticalGridLine.alpha = 0;
					btnMed1d.selected = btnMed1w.selected = btnMed1m.selected = btnMed1y.selected = btnMed3y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == '1y') 
				{
					minDateMedRec = new Date( "Nov 20 2010 01:03:54 AM");
					maxDateMedRec = new Date( "Nov 20 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartMonth;
					chartStyles.medRecVerticalGridLine.alpha = 0;
					btnMed1d.selected = btnMed1w.selected = btnMed1m.selected = btnMed3m.selected = btnMed3y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == '3y') 
				{
					minDateMedRec = new Date("Nov 20 2008 01:03:54 AM");
					maxDateMedRec = new Date("Nov 20 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartYear;
					chartStyles.medRecVerticalGridLine.alpha = 0.3;
					btnMed1d.selected = btnMed1w.selected = btnMed1m.selected = btnMed3m.selected = btnMed1y.selected = btnMedAll.selected = btnMedCustom.selected = false;
				}
				else if(range == 'all') 
				{
					minDateMedRec = new Date("Nov 20 2008 01:03:54 AM");
					maxDateMedRec = new Date("Nov 20 2011 01:03:54 AM");
					hAxisMedicalRecords.labelFunction = ChartLabelFunctions.lblHAxisPlotChartYear;
					chartStyles.medRecVerticalGridLine.alpha = 0.3;
					btnMed1d.selected = btnMed1w.selected = btnMed1m.selected = btnMed3m.selected = btnMed1y.selected = btnMed3y.selected = btnMedCustom.selected = false;
				}
				hAxisMedicalRecords.minimum = minDateMedRec;
				hAxisMedicalRecords.maximum = maxDateMedRec;
				
				/*for(var i:uint = 0; i < immunizationsCategories.length; i++) {
				var minDatePlus1:Date = minDate;
				minDatePlus1.setDate(minDate.getDate() + 1);
				canvas.moveTo(this.dateFormatterToday.format(minDatePlus1),this.immunizationsCategories[i]);
				canvas.lineTo(this.dateFormatterToday.format(maxDate),this.immunizationsCategories[i]);
				}*/
			}
			
			private function filterSearchMedRed(item:Object):Boolean
			{
				var pattern:RegExp = new RegExp("[^]*"+header.search.text+"[^]*", "i");
				var concatenatedNextSteps:String = "";
				
				if(item.nextSteps) 
				{
					for(var i:uint = 0; i < item.nextSteps.length; i++) 
					{
						concatenatedNextSteps += item.nextSteps[i].task;
					}
				}
				return pattern.test(item.name) || pattern.test(item.reason) || pattern.test(item.provider) || pattern.test(item.classification) || pattern.test(item.date) || pattern.test(item.inpdate) || pattern.test(concatenatedNextSteps);
			}
			
			private function clearSearchMedRec():void 
			{
				model.medicalRecordsData.filterFunction = null;
				model.medicalRecordsData.refresh();
				model.medicalRecordsDataGrid.filterFunction = null;
				model.medicalRecordsDataGrid.refresh();
				
				header.search.text = SEARCH_PLACEHOLDER;
				
				lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				plotMedicalRecords.visible = plotMedicalRecords.includeInLayout = myTreeMedRec.visible = myTreeMedRec.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = true;
				lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = false;
			}
			
			public function requestClass(recommendation:String):void 
			{
				dispatchEvent( new AppointmentEvent( AppointmentEvent.REQUEST_CLASS, true, false, recommendation ) );
			}
			
			private function searchFilterMedRed():void 
			{
				model.medicalRecordsData.filterFunction = filterSearchMedRed;
				model.medicalRecordsData.refresh();
				model.medicalRecordsDataGrid.filterFunction = filterSearchMedRed;
				model.medicalRecordsDataGrid.refresh();
				
				if( model.medicalRecordsData.length == 0 ) 
				{
					plotMedicalRecords.visible = plotMedicalRecords.includeInLayout = myTreeMedRec.visible = myTreeMedRec.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = false;
					lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = true;
				}
				else 
				{
					plotMedicalRecords.visible = plotMedicalRecords.includeInLayout = myTreeMedRec.visible = myTreeMedRec.includeInLayout = legendMedicalRecords.visible = legendMedicalRecords.includeInLayout = medRecDGHeader.visible = medRecDGHeader.includeInLayout = medRecDGLine.visible = medRecDGLine.includeInLayout = medicalRecordsList.visible = medicalRecordsList.includeInLayout = true;
					lblNoMedicalRecords1.visible = lblNoMedicalRecords1.includeInLayout = lblNoMedicalRecords2.visible = lblNoMedicalRecords2.includeInLayout = false;
				}
				
				if( header.search.text != "" ) 
				{
					lblSearchResultsMedRec.text = 'Search Results: "' + header.search.text + '"';
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = true;
				}
				else 
				{
					lblSearchResultsMedRec.visible = btnClearSearchMedRec.visible = false;
				}
			}
			
			private function calculateServiceUsage():void 
			{
				var countOutpatient:uint = 0;
				var countDiagnostic:uint = 0;
				
				for(var i:uint = 0; i < model.medicalRecordsData.source.length; i++) 
				{
					if( model.medicalRecordsData[i].classification == "Outpatient") countOutpatient++;
					if( model.medicalRecordsData[i].name == "Radiology" || model.medicalRecordsData[i].name == "Labs" || model.medicalRecordsData[i].name == "Clinical Tests") 
						countDiagnostic++;
				}
				
				lblMedRecOutpatient.text = String(countOutpatient);
				lblMedRecDiagnostic.text = String(countDiagnostic);
			}
			
			private function onCloseTab( event:ListEvent ):void
			{
				var index:int = event.rowIndex;
				
				model.openTabs.splice( index-1,1 );
				
				invalidateDisplayList();
			}
			
			private function onDataLoaded(event:ApplicationDataEvent=null):void
			{
				//	setting openItems = the first two only (instead of all 4 categories), because if we have the 4 categories "open", then we have a conflict with the filter (this is done so we could have "Surgeries" and "Procedures" as branches, without children, without the "open/close" arrows)
				var myTreeMedRecOpenItem:ArrayCollection = new ArrayCollection();
				myTreeMedRecOpenItem.addItem( model.medicalRecordsCategoriesTree[0] );
				myTreeMedRecOpenItem.addItem( model.medicalRecordsCategoriesTree[1] );
				
				myTreeMedRec.openItems = myTreeMedRecOpenItem;
				myTreeMedRec.rowCount = model.medicalRecordsCategories.length;
				myTreeMedRec.openItems = myTreeMedRecOpenItem;
				
				plotMedicalRecords.height= model.medicalRecordsCategories.length * 28 + 24;
				
				model.removeEventListener( ApplicationDataEvent.LOADED, onDataLoaded );
				
				onShow();
			}
			
			private function onShow():void
			{
				if( model.pendingIndex > -1 )
				{
					viewServiceDetails( model.medicalRecordsData.getItemAt( model.pendingIndex ) );
					
					model.pendingIndex = -1
				}
			}
			
			private function init():void
			{
				if( !model.dataLoaded )
				{
					model.addEventListener( ApplicationDataEvent.LOADED, onDataLoaded );
					
					var evt:ApplicationDataEvent = new ApplicationDataEvent( ApplicationDataEvent.LOAD, true );
					evt.data = Constants.MEDICAL_RECORDS;
					dispatchEvent( evt );
				}
				else
				{
					onDataLoaded();
				}
				
				header.searchPlaceholder = SEARCH_PLACEHOLDER;
				
				tabsMedicalRecords.addEventListener( TabPlus.CLOSE_TAB_EVENT, onCloseTab );
				
				calculateServiceUsage();
			}
		]]>
	</fx:Script>
	
	<components:ModuleHeader 
		id="header"
		icon="@Embed('images/btnHome.png')"
		title="Medical Records" 
		actionSuffix="new medical record." actionCount="1" 
		showSearch="true" searchFunction="searchFilterMedRed" showBackground="false" visible="{showHeader}" includeInLayout="{showHeader}" />
	
	<s:Spacer height="10" />
	
	<s:Group creationComplete="{tabsMedicalRecords.setTabClosePolicy(0, false);}"><!--tabBarMedRedInitializeHandler()-->
		
		<mx:ViewStack id="viewStackMedicalRecords" borderColor="0xBDBCBC" cornerRadius="2" backgroundColor="0x4A4A49" borderVisible="true" borderStyle="solid" x="0" y="22"><!--change="updateBreadcrumb('medicalRecords')"-->
			
			<s:NavigatorContent label="Service History"><!--id="mainBox"-->
				
				<s:layout>
					<s:VerticalLayout gap="0" />
				</s:layout>
				
				<s:BorderContainer height="37" width="100%" backgroundColor="0x706F6F">
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle" paddingRight="6" paddingLeft="8"/>
					</s:layout>
					
					<s:Button label="Print" height="24" styleName="buttonText" />
					<s:Button label="Export" height="24" styleName="buttonText" />
					
					<s:Spacer width="100%" />
					<s:Label id="lblSearchResultsMedRec" visible="false" paddingTop="2" color="0xFFFFFF" fontWeight="bold" maxWidth="260" maxDisplayedLines="1" />
					<mx:LinkButton id="btnClearSearchMedRec" label="(Clear)" visible="false" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" paddingLeft="-5" paddingRight="-8" click="clearSearchMedRec()" rollOver="btnClearSearchMedRec.styleName='linkBtnUnderline';" rollOut="btnClearSearchMedRec.styleName='linkBtn';" />
					<s:Spacer width="100%" />
					
					<s:HGroup color="0xFFFFFF" gap="0" paddingTop="1">
						
						<s:Label text="Time Range:" paddingTop="6" />
						
						<general:customLinkButton id="btnMed1d" label="1d" click="handleMedRecDateRange('1d')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMed1w" label="1w" click="handleMedRecDateRange('1w')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMed1m" label="1m" click="handleMedRecDateRange('1m')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMed3m" label="3m" click="handleMedRecDateRange('3m')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMed1y" label="1y" click="handleMedRecDateRange('1y')" toggle="true" selected="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMed3y" label="3y" click="handleMedRecDateRange('3y')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMedAll" label="All" click="handleMedRecDateRange('all')" toggle="true" toggleBackgroundColor="0x4A4A49" skin="skins.general.MyLinkButtonSkin" />
						<general:customLinkButton id="btnMedCustom" label="Custom" />
						
					</s:HGroup>
					
					<s:HGroup gap="0">
						<s:Button id="btnMedicalRecordsChart" width="29" height="24" icon="@Embed('images/btnImmunizationsChart.png')" chromeColor="0xFF931E" click="switchMedicalRecordsView(0)" />
						<s:Button id="btnMedicalRecordsList" width="29" height="24" icon="@Embed('images/btnCalendarList.png')" styleName="buttonText" click="switchMedicalRecordsView(1)" />
					</s:HGroup>
					
				</s:BorderContainer>
				
				<s:Line xFrom="0" xTo="974">
					<s:stroke>
						<s:SolidColorStroke color="#3F3E3D"/>
					</s:stroke>
					
				</s:Line>
				
				<mx:ViewStack id="viewsMedicalRecords" width="100%" height="374" creationPolicy="all">
					
					<s:NavigatorContent width="100%">
						<s:layout>
							<s:VerticalLayout />
						</s:layout>
						
						<s:HGroup id="medRecDGHeader" styleName="dataGridHeaderAlternative" verticalAlign="middle" paddingTop="-1" paddingLeft="42">
							<s:Label text="Type of Service" paddingTop="1" />
							<s:Line yFrom="0" yTo="31">
								<s:stroke>
									<s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3"/>
								</s:stroke>
							</s:Line>
							<s:Label text="Date" paddingTop="1" />
						</s:HGroup>
						
						<s:HGroup id="medRecDGLine" paddingLeft="104" paddingTop="-7" paddingBottom="-7"><!--bottom = -6, left = -2 (without ticks)-->
							<s:Line xFrom="0" xTo="870"><!-- xTo=976 (without ticks)-->
								<s:stroke>
									<s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" />
								</s:stroke>
							</s:Line>
						</s:HGroup>
						
						<s:HGroup width="100%" gap="0">
							
							<mx:Tree 
								id="myTreeMedRec" 
								dataProvider="{model.medicalRecordsCategoriesTree}" labelField="category"
								width="130"
								verticalScrollPolicy="off" horizontalScrollPolicy="off"
								selectable="false"
								itemRenderer="components.itemrenderers.MyTreeItemRendererMedRec"
								contentBackgroundAlpha="0" color="0xBED63A" fontWeight="bold" alternatingItemColors="[0x4A4A49,0x303030]"
								rowHeight="28"
								defaultLeafIcon="{null}" folderClosedIcon="{null}" folderOpenIcon="{null}"
								itemOpen="filterMedRecFromTree()" itemClose="filterMedRecFromTree()" />
							
							<mx:PlotChart 
								id="plotMedicalRecords" width="100%"
								dataProvider="{model.medicalRecordsData}" showDataTips="true" backgroundElements="{chartStyles.bgeMedicalRecords}"
								paddingLeft="-4" dataTipFunction="dataTipsMedicalRecords" creationComplete="applyCustomDataTips(); medicalRecordsSetMinMax();" itemClick="showServiceDetails(event)"><!--height="300"-->
								
								<mx:horizontalAxisRenderers>
									<mx:AxisRenderer id="hAxisRendMedicalRecords" axis="{hAxisMedicalRecords}" tickPlacement="none">
										<mx:axisStroke><mx:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" /></mx:axisStroke>
									</mx:AxisRenderer>
								</mx:horizontalAxisRenderers>
								
								<!--ADDING THIS AXIS RENDERER ONLY SO WE CAN HAVE THE HORIZONTAL LINES IN THE CHART (ie minorTicks)-->
								<mx:verticalAxisRenderers>
									<mx:AxisRenderer id="vAxisRendMedicalRecords" axis="{vAxisMedicalRecords}" tickPlacement="none" minorTickPlacement="inside" minorTickLength="845" showLabels="false"> <!--labelAlign="bottom"-->
										<mx:minorTickStroke><s:SolidColorStroke color="#FFFFFF" weight="1" alpha=".3" /></mx:minorTickStroke>
										<mx:axisStroke><mx:SolidColorStroke color="#FFFFFF" weight="1" alpha=".1" /></mx:axisStroke>
									</mx:AxisRenderer>
								</mx:verticalAxisRenderers>
								
								<mx:horizontalAxis>
									<mx:DateTimeAxis id="hAxisMedicalRecords" labelFunction="ChartLabelFunctions.lblHAxisPlotChartMonth" />
								</mx:horizontalAxis>
								
								<mx:verticalAxis>
									<!--LINEAR AXIS-->
									<!--<mx:LinearAxis id="vAxisMedicalRecords" interval="1" maximum="{immunizationsCategories.length}" labelFunction="lblVAxisImmunizations" />-->
									
									<!--CATEGORY AXIS-->
									<mx:CategoryAxis id="vAxisMedicalRecords" dataProvider="{model.medicalRecordsCategories}" /><!---->
								</mx:verticalAxis> <!-- categoryField="name" --> <!--dataFunction="catFunc"--> <!--labelFunction="lblVAxisImmunizations"-->
								
								<mx:series>
									<mx:PlotSeries xField="date" yField="name" displayName="Medical Record" fillFunction="medicalRecordsFillFunction" itemRenderer="mx.charts.renderers.BoxItemRenderer" radius="6" selectable="true" stroke="{chartStyles.whiteStroke}" /> <!--yField="order"--><!--itemRenderer="mx.charts.renderers.CircleItemRenderer" -->
									<mx:PlotSeries xField="inpdate" yField="name" displayName="Medical Record" fillFunction="medicalRecordsFillFunction" itemRenderer="mx.charts.renderers.CircleItemRenderer" radius="6" selectable="true" stroke="{chartStyles.whiteStroke}" />
								</mx:series>
							</mx:PlotChart>
						</s:HGroup>
						
						<mx:Legend id="legendMedicalRecords" direction="horizontal" color="0xFFFFFF" paddingLeft="131" fontFamily="myMyriadNoCFF">
							<mx:LegendItem label="Outpatient Services" markerAspectRatio="1" markerHeight="12" markerWidth="12" fill="{chartStyles.colorMedicalRecordsOutpatient}"  stroke="{chartStyles.whiteStroke}" />
							<mx:LegendItem label="Inpatient Services" legendMarkerRenderer="mx.charts.renderers.CircleItemRenderer" markerAspectRatio="1" markerHeight="12" markerWidth="12" fill="{chartStyles.colorMedicalRecordsInpatient}" stroke="{chartStyles.whiteStroke}" />
						</mx:Legend>
						
						<mx:Text id="lblNoMedicalRecords1" visible="false" includeInLayout="false" width="100%" textAlign="center" color="0xFFFFFF" fontSize="11" paddingTop="31"
								 htmlText="{'There are no matching search results for the requested search.&lt;br&gt;Please make sure all words are spelled correctly, or try different keywords.'}" />
						
					</s:NavigatorContent>
					
					<s:NavigatorContent height="100%">
						
						<!--I (WAS) adding the defaultDataGridItemRenderer="mx.controls.dataGridClasses.FTEDataGridItemRenderer" because without it, it's not displaying the text... See http://help.adobe.com/en_US/flex/using/WSda78ed3a750d6b8f-26a13bbf123c441239d-8000.html fpr details -->
						<mx:DataGrid 
							id="medicalRecordsList" dataProvider="{model.medicalRecordsDataGrid}" fontFamily="myMyriadNoCFF"
							width="100%" height="100%"
							itemClick="showServiceDetailsDG(event)"
							 alternatingItemColors="[0x303030,0x3c3c3b]" selectionColor="0x00ADEE" rollOverColor="0x00ADEE"
							color="0xFFFFFF" fontSize="10" verticalAlign="middle"
							headerBackgroundSkin="skins.general.CustomDataGridHeaderBackgroundSkin" headerSeparatorSkin="mx.skins.ProgrammaticSkin" headerHeight="30" paddingTop="6" headerStyleName="dataGridHeader"
							borderVisible="false" rowHeight="27" horizontalGridLines="false"><!--defaultDataGridItemRenderer="mx.controls.dataGridClasses.FTEDataGridItemRenderer"-->
							
							<mx:columns> 
								<mx:DataGridColumn dataField="date" headerText="Date of Service" paddingLeft="5" labelFunction="lblMedicalRecordsDate" />
								<mx:DataGridColumn dataField="name" headerText="Type of Service" width="180" paddingLeft="5" />
								<mx:DataGridColumn dataField="reason" headerText="Reason for Visit" paddingLeft="5" /> <!--labelFunction="lblImmunizationDetailsNextDue" -->
								<mx:DataGridColumn dataField="provider" headerText="Provider" paddingLeft="5" />
								<mx:DataGridColumn dataField="classification" headerText="Classification" paddingLeft="5" />
								<mx:DataGridColumn dataField="nextSteps" headerText="Next Steps" paddingLeft="5" labelFunction="lblMedicalRecordsNextSteps" />
							</mx:columns>
							
						</mx:DataGrid>
						
						<mx:Text id="lblNoMedicalRecords2" visible="false" includeInLayout="false" width="100%" textAlign="center" color="0xFFFFFF" fontSize="11" paddingTop="31"
								 htmlText="{'There are no matching search results for the requested search.&lt;br&gt;Please make sure all words are spelled correctly, or try different keywords.'}" />
					</s:NavigatorContent>
				</mx:ViewStack>
				
			</s:NavigatorContent>
		</mx:ViewStack>
		<plus:TabBarPlus id="tabsMedicalRecords" gap="6" cornerRadius="4" styleName="messagesTabs" closePolicy="always" dataProvider="{viewStackMedicalRecords}" change="tabsMedicalRecordsChangeHandler(event)" />
	</s:Group>
	
	<s:HGroup id="medicalRecordsBottomBoxes" paddingTop="17" gap="23">
		
		<s:BorderContainer width="294" height="173" backgroundColor="0x3C3C3B" borderColor="0xBDBDBC" cornerRadius="3" fontSize="13">
			
			<s:layout>
				<s:VerticalLayout paddingLeft="23" paddingTop="17" gap="18" />
			</s:layout>
			
			<s:Label text="Total Service Usage" styleName="greenBoldText" />
			
			<s:HGroup gap="16">
				<s:Label id="lblMedRecOutpatient" width="40" textAlign="right" styleName="orangeStandout" />
				<!--<mx:Text htmlText="{'Outpatient Services\n&lt;i&gt;in the past year&lt;/i&gt;'}" />-->
				<s:VGroup gap="3" paddingTop="3">
					<s:Label text="Outpatient Services" color="#FFFFFF" />
					<s:Label text="in the past year" fontStyle="italic" color="#CCCCCC" />
				</s:VGroup>
			</s:HGroup>
			
			<s:HGroup gap="16" paddingTop="10">
				<s:Label id="lblMedRecDiagnostic" width="40" textAlign="right" styleName="orangeStandout" />
				<s:VGroup gap="3" paddingTop="3">
					<s:Label text="Diagnostic Services" color="#FFFFFF" />
					<s:Label text="in the past year" fontStyle="italic" color="#CCCCCC" />
				</s:VGroup>
			</s:HGroup>
			
		</s:BorderContainer>
		
		<s:BorderContainer width="659" maxHeight="173" backgroundColor="0x3C3C3B" borderColor="0xBDBDBC" cornerRadius="3">
			
			<s:layout>
				<s:VerticalLayout paddingTop="17" />
			</s:layout>
			
			<s:HGroup width="100%" paddingRight="7" paddingTop="-1" paddingLeft="23" paddingBottom="6">
				<s:Label text="My Next Steps" styleName="greenBoldText" paddingTop="1" />
				<s:Spacer width="100%" />
				<mx:LinkButton id="btnNextStepsHistory" label="History" click="showNextStepsHistory()" fontSize="11" paddingTop="-6" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnNextStepsHistory.styleName='linkBtnUnderline';}" rollOut="btnNextStepsHistory.styleName='linkBtn';" />
			</s:HGroup>
			
			<mx:DataGrid id="dgMedRecNextSteps" dataProvider="{model.medicalRecordsNextSteps}" width="100%" height="100%" fontSize="12" color="0xEDEDED" selectable="false" headerHeight="0" borderVisible="false" rowHeight="64" verticalGridLines="false" horizontalGridLines="false" alternatingItemColors="[0x303030,0x3C3C3B]">
				<mx:columns>
					<mx:DataGridColumn dataField="task" paddingLeft="23" width="530">
						<mx:itemRenderer>
							<fx:Component>		
								<mx:HBox paddingTop="8">
									<s:Label text="•" fontSize="6" paddingTop="2" />
									<mx:VBox verticalGap="3"><!--no vgap when fontFamily="myMyriadNoCFF"-->
										<s:Label text="{data.task}" width="420" lineHeight="16" />
										<mx:HBox visible="{data.recommendation != ''}" includeInLayout="{data.recommendation != ''}">
											<s:Label text="Recommendation:" paddingTop="4" /><!--paddingTop was 2 when fontFamily="myMyriadNoCFF"-->
											<mx:LinkButton id="btnNextStepsRecommendation" label="{data.recommendation}" paddingTop="-5" paddingLeft="-7" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnNextStepsRecommendation.styleName='linkBtnUnderline';}" rollOut="btnNextStepsRecommendation.styleName='linkBtn';" click="{outerDocument.requestClass(data.recommendation)}" />
										</mx:HBox>
									</mx:VBox>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn dataField="completed">
						<mx:itemRenderer>
							<fx:Component>		
								<mx:HBox paddingTop="13" horizontalGap="-2" horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<mx:VBox paddingTop="2">
										<s:Image source="@Embed('images/checkmarkNextSteps.png')" toolTip="Completed" visible="{data.completed}" />
									</mx:VBox>
									<mx:VBox verticalGap="1" paddingTop="-2"><!--vgap was 3, no paddingTop-->
										<mx:LinkButton id="btnNextStepsMarkCompleted" label="{data.completed ? 'Unmark completed' : 'Mark completed'}" paddingTop="-5" color="0xAEDEE4" click="{data.completed = !data.completed}" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnNextStepsMarkCompleted.styleName='linkBtnUnderline';}" rollOut="btnNextStepsMarkCompleted.styleName='linkBtn';" />
										<mx:LinkButton id="btnNextStepsDelete" label="Remove" color="0xAEDEE4" textRollOverColor="0xAEDEE4" click="{outerDocument.model.medicalRecordsNextSteps.removeItemAt(outerDocument.model.medicalRecordsNextSteps.getItemIndex(data))}" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnNextStepsDelete.styleName='linkBtnUnderline';}" rollOut="btnNextStepsDelete.styleName='linkBtn';" />
									</mx:VBox>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</s:BorderContainer>
	</s:HGroup>
	
</s:VGroup>
