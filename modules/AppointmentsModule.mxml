<?xml version="1.0" encoding="utf-8"?>
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:components="components.*"
	creationComplete="init()" xmlns:views="external.calendar.classes.views.*">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import ASclasses.Constants;
			
			import components.popups.myAppointmentsWindow;
			import components.popups.myClassesWindow;
			import components.popups.myConfirmCancelWindow;
			
			import controllers.PatientAppointmentsController;
			
			import events.ApplicationEvent;
			import events.AppointmentEvent;
			
			import external.calendar.classes.events.CustomEvents;
			import external.calendar.classes.model.DataHolder;
			import external.calendar.mxml_views.monthCell;
			
			import models.Message;
			import models.modules.AppointmentsModel;
			import models.modules.MedicalRecordsModel;
			
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.managers.PopUpManager;
			
			import styles.ChartStyles;
			
			[Bindable] private var controller:PatientAppointmentsController = AppProperties.getInstance().controller.appointmentsController as PatientAppointmentsController;
			[Bindable] public var model:AppointmentsModel = controller.model as AppointmentsModel;
			[Bindable] private var chartStyles:ChartStyles = AppProperties.getInstance().controller.model.chartStyles;
			
			private var cancelAppointmentButton:Button;
			private var cancelAppointmentPopup:myConfirmCancelWindow;
			private var wasGridDisplayedAlready:Boolean = false;
			
			//	used to send the appropriate parameter to the messages module when creating a new messages from the appts module.
			public var selectedApptType:String = "appointment";
			
			private function setApplicationState( state:String ):void
			{
				var evt:ApplicationEvent = new ApplicationEvent( ApplicationEvent.SET_STATE, true );
				evt.data = state;
				dispatchEvent( evt );
			}
			
			private function requestClasses( className:String = '' ):void 
			{
				var evt:AppointmentEvent = new AppointmentEvent( AppointmentEvent.REQUEST_CLASS, true );
				evt.data = className;
				dispatchEvent( evt );
				
				stackViews.selectedIndex = 1;
				
				activateButton( btnCalendarWeek );
			}
			
			private function requestAppointment():void 
			{
				var evt:AppointmentEvent = new AppointmentEvent( AppointmentEvent.REQUEST_APPOINTMENT, true );
				dispatchEvent( evt );
				
				stackViews.selectedIndex = 1;
				
				activateButton( btnCalendarWeek );
			}
			
			//	TODO: make this a button bar, so we don't have to manually set colors
			private function activateButton( activeButton:Button ):void
			{
				var buttons:Array = [btnCalendarMonth, btnCalendarWeek, btnCalendarList ];
				for each(var button:Button in buttons ) button.setStyle("chromeColor", 0xB3B3B3);
				
				activeButton.setStyle("chromeColor", 0xFF931E);
			}
			
			private function populateLeftColumn():void 
			{
				upcomingAppts.removeAllElements();
				
				for(var i:uint = 0; i < DataHolder.getInstance().dataProvider.length; i++) 
				{
					var myUpcomingApptLabel:Label = new Label();
					var obj:Object = DataHolder.getInstance().dataProvider[i];
					
					if(obj.status != "Completed") 
					{
						myUpcomingApptLabel.text = obj.provider + " - " + obj.desc + "\n" + String(obj.date).substr(0,3) + ", " + String(obj.date).substr(4,3) + " " + obj.date.getDate() + ", " + (obj.meridiem != "pm" ? obj.hour : int(obj.hour) + 12) + ":" + (obj.mins == 0 ? '00' : obj.mins) + " hrs";
						//	add DATE SORTING here
						upcomingAppts.addElement(myUpcomingApptLabel);
					}
				}
				
				header.actionCount = DataHolder.getInstance().dataProvider.length - 10;
			}
			
			private function populateRightColumn(obj:Object):void 
			{
				appointmentProvider.text = obj.provider;
				appointmentDateStart.text = String(obj.date).substr(4,3) + " " + obj.date.getDate() + ", " + obj.date.getFullYear() + " at " + (obj.meridiem != "pm" ? obj.hour : int(obj.hour) + 12) + ":" + (obj.mins == 0 ? '00' : obj.mins);
				appointmentDateEnd.text = String(obj.date).substr(4,3) + " " + obj.date.getDate() + ", " + obj.date.getFullYear() + " at " + (obj.mins == 0 ? (obj.meridiem != "pm" ? obj.hour : int(obj.hour) + 12) : (obj.meridiem != "pm" ? int(obj.hour) : int(obj.hour) + 12) + 1) + ":" + (obj.mins == 0 ? '30' : '00');
				appointmentType.text = obj.type == "Appointment" ? "Routine" : "Class";		//initially routine...
				appointmentRFV.text = obj.desc;
				btnAppointmentMessage.label = "Message " + obj.provider;
				
				if( cancelAppointmentButton ) hgCancelAppt.removeElement( cancelAppointmentButton );
				
				cancelAppointmentButton = new Button();
				cancelAppointmentButton.label = "- Cancel Appointment";
				cancelAppointmentButton.height=24;
				cancelAppointmentButton.styleName="buttonText";
				cancelAppointmentButton.addEventListener( MouseEvent.CLICK,onCancelAppointmentClick(obj) );
				hgCancelAppt.addElement( cancelAppointmentButton );
			}
			
			private function onCancelAppointmentClick(myObj:Object):Function 
			{
				return function(mouseEvent:MouseEvent):void {
					confirmCancel(myObj);
				}
			}
			
			private function confirmCancel(myObj:Object):void 
			{
				onCancelAppointmentClose();
				
				cancelAppointmentPopup = myConfirmCancelWindow( PopUpManager.createPopUp(this, myConfirmCancelWindow) as spark.components.TitleWindow );
				cancelAppointmentPopup.apptToCancel = myObj;
				cancelAppointmentPopup.addEventListener( CloseEvent.CLOSE, onCancelAppointmentClose );
				cancelAppointmentPopup.addEventListener( AppointmentEvent.CANCEL_APPOINTMENT, onCancelAppointment );
				
				PopUpManager.centerPopUp( cancelAppointmentPopup );
			}
			
			private function onCancelAppointment( event:AppointmentEvent ):void
			{
				DataHolder.getInstance().removeEvent( event.data );
				
				populateLeftColumn();
				appointmentsList.invalidateList();
				
				rightColumn.visible = rightColumn.includeInLayout = false;
				rightColumnEventCanceled.visible = rightColumnEventCanceled.includeInLayout = true;
			}
			
			private function onCancelAppointmentClose( event:CloseEvent = null ):void
			{
				if( !cancelAppointmentPopup ) return;
				if( cancelAppointmentPopup.parent ) PopUpManager.removePopUp(cancelAppointmentPopup);
				
				cancelAppointmentPopup.removeEventListener( CloseEvent.CLOSE, onCancelAppointmentClose );
				cancelAppointmentPopup.removeEventListener( AppointmentEvent.CANCEL_APPOINTMENT, onCancelAppointment );
				
				cancelAppointmentPopup = null;
			}
			
			private function onDateScroll():void
			{
				onDateChange();
			}
			
			private function onDateChange():void
			{
				model.currentDate = new Date( dtPicker.displayedYear, dtPicker.displayedMonth, dtPicker.selectedDate.date );
			}
			
			// function fires when a cell is being clicked from the Month View
			private function onMonthViewClick(_event:CustomEvents):void
			{
				model.currentDate = _event.object.date;
				
				onDateChange();
				
				stackViews.selectedIndex = 0;
				
				//	TODO: make this a button bar, so we don't have to manually set colors
				activateButton( btnCalendarMonth );
			}
			
			private function onMonthViewAddClass( event:AppointmentEvent ):void
			{
				selectAppointment( event.data );
			}
			
			private function onMonthViewAddAppointment( event:AppointmentEvent ):void
			{
				selectAppointment( event.data );
			}
			
			// function fires when Save button is clicked from Event From to save an event
			private function onNewEventAdded(_event:CustomEvents):void
			{
				onDateChange();
				
				monthView.redraw();
			}
			
			private function onWeekClick():void
			{
				stackViews.selectedIndex = 1;
				
				activateButton( btnCalendarWeek );
			}
			
			private function onMonthClick():void
			{
				stackViews.selectedIndex = 0;
				
				activateButton( btnCalendarMonth );
			}
			
			private function onListClick():void
			{
				stackViews.selectedIndex = 2;
				
				if(wasGridDisplayedAlready) 
				{
					//	this refreshes the datagrid! (if the dataProvider was an ArrayCollection, should use invalidateDisplayList() instead.
					appointmentsList.invalidateList();
				}
				
				wasGridDisplayedAlready = true;
				
				activateButton( btnCalendarList );
			}
			
			private function appointmentDateLabelFunction(item:Object, column:DataGridColumn):String 
			{
				var mins:String = item.mins == 0 ? "00" : item.mins;
				
				return Constants.MONTHS_ABBR[ item.date.getMonth() ] + ' ' + item.date.getDate() + ', ' + item.date.getFullYear() + ' - ' + item.hour + ':' + mins + ' ' + item.meridiem;
			}
			
			private function appointmentsListSelection():void 
			{
				selectAppointment( appointmentsList.selectedItem );
			}
			
			public function selectAppointment(selectedObject:Object):void 
			{
				for(var i:uint = 0; i < DataHolder.getInstance().dataProvider.length; i++) 
				{
					var obj:Object = DataHolder.getInstance().dataProvider[i];
					
					if(obj == selectedObject) 
					{
						obj.selected = true;
						
						rightColumn.visible = rightColumn.includeInLayout = true;
						rightColumnEventCanceled.visible = rightColumnEventCanceled.includeInLayout = false;
						appointmentProvider.text = obj.type == "Appointment" ? obj.provider : obj.desc;
						appointmentDateStart.text = String(obj.date).substr(4,3) + " " + obj.date.getDate() + ", " + obj.date.getFullYear() + " at " + (obj.meridiem != "pm" ? obj.hour : int(obj.hour) + 12) + ":" + (obj.mins == 0 ? '00' : obj.mins);
						appointmentDateEnd.text = String(obj.date).substr(4,3) + " " + obj.date.getDate() + ", " + obj.date.getFullYear() + " at " + (obj.mins == 0 ? (obj.meridiem != "pm" ? obj.hour : int(obj.hour) + 12) : (obj.meridiem != "pm" ? int(obj.hour) : int(obj.hour) + 12) + 1) + ":" + (obj.mins == 0 ? '30' : '00');
						
						if(obj.type == "Appointment") 
						{
							appointmentDetails.visible = appointmentDetails.includeInLayout = true;
							classDetails.visible = classDetails.includeInLayout = false;
							appointmentType.text = "Routine";
							appointmentRFV.text = obj.desc;
							btnAppointmentMessage.label = "Message " + obj.provider;
							selectedApptType = "appointment";
							
							if(obj.nextSteps == "Yes") 
							{
								vgNextSteps.visible = vgNextSteps.includeInLayout = nextStepsLine.visible = nextStepsLine.includeInLayout = true;
								lblNextSteps.text = obj.nextStepsText;
							}
							else vgNextSteps.visible = vgNextSteps.includeInLayout = nextStepsLine.visible = nextStepsLine.includeInLayout = false;
							
							if(obj.status == "Completed") 
							{
								hgViewMedRec.visible = hgViewMedRec.includeInLayout = true;
								MedicalRecordsModel( AppProperties.getInstance().controller.medicalRecordsController.model ).pendingIndex = obj.medRecIndex;
								
								//selectedApptMedRecIndex = obj.medRecIndex;
							}
							else hgViewMedRec.visible = hgViewMedRec.includeInLayout = false;
							
						}
						else 
						{
							appointmentDetails.visible = appointmentDetails.includeInLayout = false;
							classDetails.visible = classDetails.includeInLayout = true;
							appointmentType.text = "Class";
							classInstructor.text = obj.provider;
							btnAppointmentMessage.label = "Message class instructor";
							selectedApptType = "class";
						}
						
						if( cancelAppointmentButton ) hgCancelAppt.removeElement( cancelAppointmentButton );
						
						cancelAppointmentButton = new Button();
						cancelAppointmentButton.label = obj.type == "Appointment" ? "- Cancel Appointment" : "- Cancel Reservation";
						cancelAppointmentButton.height = 24;
						cancelAppointmentButton.styleName="buttonText";
						cancelAppointmentButton.addEventListener( MouseEvent.CLICK, onCancelAppointmentClick(obj) );
						hgCancelAppt.addElement( cancelAppointmentButton );
						
						appointmentsList.selectedItem = obj;	//update the list view's selection = the selected object (we're also setting the viewStack.creationPolicy=all to avoid this line from creating an error in case appointmentsList wasn't created yet)
					}
					else obj.selected = false;
				}
				
				monthView.redraw();
			}
			
			private function viewMedicalRecord():void 
			{
				setApplicationState( Constants.MEDICAL_RECORDS );
				
				/*
				if( wasModuleCreated ) medicalRecordsXMLdata.send();
				currentState = 'modMedicalRecords';
				
				if(wasModuleCreated) viewServiceDetails(medicalRecordsData.getItemAt(index));
				else wasModuleCreated = true;	//this is important, because it makes the handleIfFromAppts() from appointments.as run the viewServiceDetails() function.
				*/
			}
			
			private function addInitialAppointments():void 
			{
				var obj:Object = new Object();
				var today:Date = new Date();
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "Physical Examination";
				obj.type = "Appointment";
				obj.selected = true;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Scheduled";
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date();
				today.setHours(0,0,0,0);
				var weekDay:Number = today.getDay();
				var daysToAddToReachFriday:Array = [5,4,3,2,1,7,6];
				today.setDate(today.date + daysToAddToReachFriday[weekDay]);	//aka "next week"
				obj.date = today;
				obj.hour = "09";
				obj.meridiem = "am";
				obj.mins = 30;
				obj.desc = "Allergies";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Greenfield";		//, Team 1
				obj.status = "Scheduled";
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date();
				today.setHours(0,0,0,0);
				var nextWeekButNotWednesday:uint = (weekDay != 3) ? 7 : 8;
				today.setDate(today.date + nextWeekButNotWednesday);	//aka "next week" (Anthony requested to make sure this doesn't happen on Wednesday, to avoid a usability test conflict with the other existing appointment on Wednesday).
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 30;
				obj.desc = "Flu Vaccination";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Scheduled";
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date();
				today.setHours(0,0,0,0);
				var daysToAddToReachWednesday:Array = [3,2,1,7,6,5,4];
				today.setDate(today.date + daysToAddToReachWednesday[weekDay]);	//aka "next week"
				obj.date = today;
				obj.hour = "01";
				obj.meridiem = "pm";
				obj.mins = 00;
				obj.desc = "Physical Therapy";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Scheduled";
				DataHolder.getInstance().addEvent(obj,false);
				
				//previous appointments (from "Medical Records"):
				obj = new Object();
				today = new Date("09/16/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "Physician Examination";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.nextSteps = "Yes";
				obj.nextStepsText = "•Start the Physical Rehabilitation regimen we spoke about. Our Gentle Chair Yoga class would be beneficial if you find the time.\n\n•Continue to check blood sugar twice daily.";
				obj.status = "Completed";
				obj.medRecIndex = 10;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("08/11/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "Consultation";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Hammond";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 9;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("08/11/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "01";
				obj.meridiem = "pm";
				obj.mins = 0;
				obj.desc = "Surgery";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 8;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("10/16/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "MRI";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 6;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("09/16/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "01";
				obj.meridiem = "pm";
				obj.mins = 0;
				obj.desc = "MRI";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 5;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("08/11/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "04";
				obj.meridiem = "pm";
				obj.mins = 0;
				obj.desc = "Blood Test";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Rothstein";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 4;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("08/11/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "07";
				obj.meridiem = "pm";
				obj.mins = 0;
				obj.desc = "Cardiac Stress Test";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Hammond";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 3;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("10/07/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "Appendectomy";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 2;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("07/07/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "11";
				obj.meridiem = "am";
				obj.mins = 0;
				obj.desc = "Nasal Procedure";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 1;
				DataHolder.getInstance().addEvent(obj,false);
				
				obj = new Object();
				today = new Date("10/07/2011");
				today.setHours(0,0,0,0);
				obj.date = today;
				obj.hour = "02";
				obj.meridiem = "pm";
				obj.mins = 0;
				obj.desc = "Colonscopy";
				obj.type = "Appointment";
				obj.selected = false;
				obj.provider = "Dr. Berg";		//, Team 1
				obj.status = "Completed";
				obj.medRecIndex = 0;
				DataHolder.getInstance().addEvent(obj);
				
				populateLeftColumn();
			}
			
			private function sendMessage(type:String):void 
			{
				var message:Message = new Message();
				message.recipientType = "appointment" ? 1 : 2;
				
				var event:ApplicationEvent = new ApplicationEvent( ApplicationEvent.SET_STATE, true );
				event.data = Constants.MODULE_MESSAGES;
				event.message = message;
				dispatchEvent( event );
			}
			
			private function onWeekViewViewClass(event:AppointmentEvent):void
			{
				selectAppointment( event.data );
				
				dispatchEvent( new CustomEvents( CustomEvents.MONTH_VIEW_CLICK, event.data.date ) );
			}
			
			private function init():void
			{
				dtPicker.selectedDate = model.currentDate;
					
				// create events
				weekView.addEventListener( AppointmentEvent.ADD_CLASS, onWeekViewViewClass );
				weekView.addEventListener( AppointmentEvent.VIEW_CLASS, onWeekViewViewClass );
				weekView.addEventListener( AppointmentEvent.REQUEST_CLASS, onWeekViewViewClass );
				
				monthView.addEventListener( CustomEvents.MONTH_VIEW_CLICK, onMonthViewClick );
				monthView.addEventListener( AppointmentEvent.ADD_APPOINTMENT, onMonthViewAddAppointment );
				monthView.addEventListener( AppointmentEvent.ADD_CLASS, onMonthViewAddClass );
				monthView.addEventListener( AppointmentEvent.VIEW_CLASS, onMonthViewAddClass );
				
				model.addEventListener( AppointmentEvent.ADD_APPOINTMENT, onMonthViewAddClass );
				model.addEventListener( AppointmentEvent.ADD_CLASS, onMonthViewAddClass );
				
				DataHolder.getInstance().addEventListener(CustomEvents.ADD_NEW_EVENT, onNewEventAdded );
				
				addInitialAppointments();
				
				populateRightColumn( DataHolder.getInstance().dataProvider[0] );
				populateLeftColumn();
				
				onDateChange();
			}
		]]>
	</fx:Script>
	
	<components:ModuleHeader 
		id="header"
		icon="@Embed('images/btnHome.png')" title="Appointments" 
		actionPrefix="You have" actionCount="0" actionSuffix="appointments in the coming week." showBackground="false"
		showSearch="true" searchPlaceholder="Search appointments" />
	
	<s:Spacer height="10" />
	
	<s:BorderContainer borderColor="0xBDBCBC" cornerRadius="4" backgroundColor="0x4A4A49" width="976">
		
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" />
		</s:layout>
		
		<s:HGroup>
			<s:VGroup width="150" height="100%" gap="3">
				
				<s:Label text="Upcoming" styleName="subtitles" textAlign="center" width="100%" paddingTop="15" />
				<s:VGroup id="upcomingAppts" styleName="smallText" paddingLeft="9" paddingTop="15" width="100%" gap="14">
				</s:VGroup>
				
				<!--<s:Label text="{'Dr. Berg  –  Chronic Back Pain\nMon, Nov 16, 0830 hrs\n\nDr. Hammond  – Physical Exam\nMon, Nov 16, 1145  hrs'}" />-->
				
				<s:Label text="Recommended" styleName="subtitles" textAlign="center" width="100%" paddingTop="23" />
				
				<s:Label text="Tetanus Vaccination" styleName="smallText" paddingLeft="9" paddingTop="15" />
				
				<s:HGroup paddingTop="-5" paddingBottom="-5" paddingLeft="-1">
					<mx:LinkButton id="btnScheduleAppt" label="Schedule Appointment" click="{stackViews.selectedIndex = 1; controller.setAvailable('set2', 'Tetanus Vaccination');}" fontSize="10.5" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnScheduleAppt.styleName='linkBtnUnderline';}" rollOut="btnScheduleAppt.styleName='linkBtn';" />
				</s:HGroup>
				
				<s:Label text="Gentle Chair Yoga" styleName="smallText" paddingLeft="9" paddingTop="8" />
				
				<s:HGroup paddingTop="-5" paddingBottom="-5" paddingLeft="-1">
					<mx:LinkButton id="btnScheduleClass" label="Schedule Class" click="requestClasses('yogaGentle')" fontSize="10.5" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnScheduleClass.styleName='linkBtnUnderline';}" rollOut="btnScheduleClass.styleName='linkBtn';" />
				</s:HGroup>
				
				<s:Spacer height="100%" />
				
				<mx:DateChooser 
					id="dtPicker" scroll="onDateScroll()" change="onDateChange()" 
					showToday="true" 
					contentBackgroundColor="0x4A4A49" borderColor="0x4A4A49" color="0xFFFFFF" headerColors="[0xF7F7F7,0xB3B3B3]" selectionColor="0x585858" rollOverColor="0x4A4A49" todayColor="0xD6D6D6" headerStyleName="dateChooserGrayHeader"
					fontSize="11" width="160" />
				
			</s:VGroup>
			
			<s:BorderContainer width="646" height="625" borderColor="0xBDBCBC" backgroundColor="0X3C3C3B">
				
				<s:layout>
					<s:VerticalLayout paddingBottom="-1" paddingTop="-1" /><!-- negative padding so the top and bottom borders overlap with the calendar's borders (instead of making a double line)-->
				</s:layout>
				
				<s:BorderContainer height="37" width="100%" borderVisible="false" backgroundColor="0x706F6F">
					
					<s:layout>
						<s:HorizontalLayout paddingTop="6" paddingLeft="6" paddingRight="6" />
					</s:layout>
					
					<s:Button label="+ Request an Appointment" height="24" styleName="buttonText" click="requestAppointment()" />		<!-- click="{weekView.displayAppointments()}" click reference added by damian -->
					<s:Button label="+ Find a Class" height="24" styleName="buttonText" click="requestClasses()" />
					<s:Button label="Export" height="24" styleName="buttonText" />
					<s:Spacer width="100%" />
					
					<s:HGroup gap="0">
						<s:Button id="btnCalendarMonth" width="29" height="24" icon="@Embed('images/btnCalendarMonth.png')" click="onMonthClick()" chromeColor="0xFF931E" />
						<s:Button id="btnCalendarWeek" width="29" height="24" icon="@Embed('images/btnCalendarWeek.png')" click="onWeekClick()" chromeColor="0xB3B3B3" />
						<s:Button id="btnCalendarList" width="29" height="24" icon="@Embed('images/btnCalendarList.png')" click="onListClick()" chromeColor="0xB3B3B3" />
					</s:HGroup>
					
				</s:BorderContainer>
				
				<mx:ViewStack id="stackViews" width="100%" height="100%" creationPolicy="all">	<!--setting creationPolicy="all" so that we can set appointmentsList.selectedItem when selecting an appointment from MonthView-->
					
					<views:MonthView id="monthView" label="Month View" horizontalScrollPolicy="off" verticalScrollPolicy="off" currentMonth="{dtPicker.displayedMonth}" currentYear="{dtPicker.displayedYear}" showEffect="WipeDown" hideEffect="WipeUp" width="100%" />
					<views:WeekViewTimeSlots id="weekView" timeSlots="{model.timeSlots}" label="Week View" x="0" y="0" currentDate="{model.currentDate}" horizontalScrollPolicy="off" showEffect="WipeDown" hideEffect="WipeUp" />
					
					<mx:VBox showEffect="WipeDown" hideEffect="WipeUp">
						<mx:DataGrid 
							id="appointmentsList" dataProvider="{DataHolder.getInstance().dataProvider}" fontFamily="myMyriadNoCFF"
							width="100%" height="100%"
							change="appointmentsListSelection()"
							alternatingItemColors="[0x303030,0x3c3c3b]" selectionColor="0x00ADEE" rollOverColor="0x00ADEE"
							color="0xFFFFFF" fontSize="10" verticalAlign="middle"
							headerBackgroundSkin="skins.general.CustomDataGridHeaderBackgroundSkin" headerSeparatorSkin="mx.skins.ProgrammaticSkin" headerHeight="28" headerStyleName="dataGridHeader"
							borderVisible="false" rowHeight="27" horizontalGridLines="false" verticalGridLines="false" creationComplete="appointmentsList.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, 0, null, 0, null, null, 0));"><!--http://www.hsharma.com/air/auto-sort-datagrid-column-in-flex-3/-->	<!--originally rollOverColor="0x286982"--><!--defaultDataGridItemRenderer="mx.controls.dataGridClasses.FTEDataGridItemRenderer"-->
							
							<mx:columns> 
								<mx:DataGridColumn dataField="date" headerText="Date of Service" width="195" paddingLeft="10" labelFunction="appointmentDateLabelFunction" sortDescending="true"/> 
								<mx:DataGridColumn dataField="type" headerText="Type" /> 
								<mx:DataGridColumn dataField="provider" headerText="Provider"/> 
								<mx:DataGridColumn dataField="desc" headerText="Description" width="135"/> 
								<mx:DataGridColumn dataField="nextSteps" headerText="Next Steps"/> 
								<mx:DataGridColumn dataField="status" headerText="Status"/> 
							</mx:columns> 
							
						</mx:DataGrid>
					</mx:VBox>
					<!--<views:WeekView id="weekView" label="Week View" currentDate="{m_intCurrentDate}" horizontalScrollPolicy="off" showEffect="WipeDown" hideEffect="WipeUp" />-->
				</mx:ViewStack>
				
			</s:BorderContainer>
			
			<s:VGroup id="rightColumn" width="166">
				
				<s:Label text="Event Details" styleName="subtitles" textAlign="center" width="100%" paddingTop="15" />
				<s:Label id="appointmentProvider" text="Dr. Gregory Bern, Team 1" textAlign="center" width="100%" styleName="smallText" paddingTop="12" />
				
				<s:Line xFrom="0" xTo="160" left="20">
					<s:stroke>
						<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
					</s:stroke>
				</s:Line>
				
				<s:HGroup>
					<s:Label text="From" textAlign="right" width="59" styleName="smallTextBold" />
					<s:Label id="appointmentDateStart" text="Nov 16, 2011 at 08:30" styleName="smallText" />
				</s:HGroup>
				
				<s:HGroup>
					<s:Label text="To" textAlign="right" width="59" styleName="smallTextBold" />
					<s:Label id="appointmentDateEnd" text="Nov 16, 2011 at 11:45" styleName="smallText" />
				</s:HGroup>
				
				<s:Line xFrom="0" xTo="160" left="20">
					<s:stroke>
						<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
					</s:stroke>
				</s:Line>
				
				<s:VGroup id="appointmentDetails">
					
					<s:HGroup>
						<s:Label text="Type" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label id="appointmentType" text="Routine" styleName="smallText" />
					</s:HGroup>
					
					<s:HGroup>
						<s:Label text="Classific." textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label text="Outpatient" styleName="smallText" />
					</s:HGroup>
					
					<s:HGroup>
						<s:Label text="RFV" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label id="appointmentRFV" text="Chronic Back Pain" styleName="smallText" />
					</s:HGroup>
					
					<s:Line xFrom="0" xTo="160" left="20">
						<s:stroke>
							<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
						</s:stroke>
					</s:Line>
					
					<s:HGroup>
						<s:Label text="Phone" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label text="(999) 999-9999" styleName="smallText" />
					</s:HGroup>
					
					<s:HGroup>
						<s:Label text="Address" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label text="{'The New York Clinic\n99 Main St.\nNew York, NY 11111'}" styleName="smallText" />
					</s:HGroup>
					
				</s:VGroup>
				
				<s:Line id="nextStepsLine" xFrom="0" xTo="160" left="20" visible="false" includeInLayout="false">
					<s:stroke>
						<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
					</s:stroke>
				</s:Line>
				
				<s:VGroup id="vgNextSteps" visible="false" includeInLayout="false" paddingLeft="3">
					<s:Label text="Next Steps" styleName="smallTextBold" />
					<s:Label id="lblNextSteps" styleName="smallText" width="155" />
				</s:VGroup>
				
				<s:VGroup id="classDetails" visible="false" includeInLayout="false">
					
					<s:HGroup>
						<s:Label text="Instructor" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label id="classInstructor" styleName="smallText" />
					</s:HGroup>
					
					<s:HGroup>
						<s:Label text="Location" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label text="{'The New York Clinic\n99 Main St.\nNew York, NY 11111'}" styleName="smallText" />
					</s:HGroup>
					
					<s:Line xFrom="0" xTo="160" left="20">
						<s:stroke>
							<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
						</s:stroke>
					</s:Line>
					
					<s:HGroup>
						<s:Label text="Availability" textAlign="right" width="59" styleName="smallTextBold" />
						<s:Label text="3 seats remaining" styleName="smallText" />
					</s:HGroup>
					
				</s:VGroup>
				
				<s:Line xFrom="0" xTo="160" left="20">
					<s:stroke>
						<s:SolidColorStroke color="0x9E9E9E" weight="1"/>
					</s:stroke>
				</s:Line>
				
				<s:HGroup width="100%" horizontalAlign="center" paddingTop="-5" paddingBottom="-5">
					<mx:LinkButton id="btnAppointmentMessage" click="{sendMessage(selectedApptType)}" fontSize="10.5" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnAppointmentMessage.styleName='linkBtnUnderline';}" rollOut="btnAppointmentMessage.styleName='linkBtn';" />
				</s:HGroup>
				
				<s:HGroup id="hgViewMedRec" width="100%" horizontalAlign="center" paddingTop="-5" paddingBottom="-5" visible="false" includeInLayout="false">
					<mx:LinkButton id="btnViewMedicalRecord" label="View Medical Record" click="{ viewMedicalRecord() }" fontSize="10.5" color="0xAEDEE4" textRollOverColor="0xAEDEE4" textSelectedColor="0xAEDEE4" skin="{null}" rollOver="{btnViewMedicalRecord.styleName='linkBtnUnderline';}" rollOut="btnViewMedicalRecord.styleName='linkBtn';" />
				</s:HGroup>
				
				<s:HGroup id="hgCancelAppt" horizontalAlign="center" width="100%" paddingTop="15">
					<!--<s:Button id="btnCancelAppointment" label="- Cancel Appointment" height="24" styleName="buttonText" />-->
				</s:HGroup>
				
				<!--<s:Spacer height="100%" />
				<mx:Button label="Add Event" click="{eventForm.visible=true;}" enabled="{eventForm.currentDate != null}" />
				<mx:Button y="420" x="10" label="data set 1" click="setAvailable('set1')"/>
				<mx:Button y="420" x="100" label="data set 2" click="setAvailable('set2')"/>
				<comViews:EventForm id="eventForm" hour="{CommonUtils.hour}" meridiem="{CommonUtils.meridiem}" mins="{CommonUtils.mins}" currentDate="{CommonUtils.currentDate}" description="{CommonUtils.description}" visible="{eventForm.currentDate != null}" includeInLayout="{eventForm.currentDate != null}">
				</comViews:EventForm>-->
			</s:VGroup>
			
			<s:VGroup id="rightColumnEventCanceled" width="166" visible="false" includeInLayout="false">
				<s:Label text="Event Details" styleName="subtitles" textAlign="center" width="100%" paddingTop="15" />
				<s:Label text="Your appointment has been canceled" textAlign="center" width="100%" styleName="smallText" fontStyle="italic" paddingTop="12" paddingLeft="-4" />
			</s:VGroup>
		</s:HGroup>
		
	</s:BorderContainer>
	
</s:VGroup>
